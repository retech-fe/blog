<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="/blog/2022/10/27/design-pattern-strategy/"/>
    <url>/blog/2022/10/27/design-pattern-strategy/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式 （Strategy Pattern）又称政策模式，其定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。封装的策略算法一般是独立的，策略模式根据输入来调整采用哪个算法。</p><ul><li>关键是策略的实现和使用分离</li><li>避免大量的if else 或 swith case</li></ul><h2 id="生活中的例子"><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li><p>现在电子产品种类繁多，尺寸多种多样，有时候你会忍不住想拆开看看里面啥样（想想小时候拆的玩具车还有遥控器），但是螺丝规格很多，螺丝刀尺寸也不少，如果每碰到一种规格就买一个螺丝刀，家里就得堆满螺丝刀了。所以现在人们都用多功能的螺丝刀套装，螺丝刀把只需要一个，碰到不同规格的螺丝只要换螺丝刀头就行了，很方便，体积也变小很多。</p></li><li><p>一辆车的轮胎有很多规格，在泥泞路段开的多的时候可以用泥地胎，在雪地开得多可以用雪地胎，高速公路上开的多的时候使用高性能轮胎，针对不同使用场景更换不同的轮胎即可，不需更换整个车。</p></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>螺丝刀头&#x2F;轮胎（策略）之间相互独立，但又可以相互替换；</li><li>螺丝刀&#x2F;车（封装上下文）可以根据需要的不同选用不同的策略；</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>场景是这样的，某个电商网站希望举办一个活动，通过打折促销来销售库存物品，普通不打折，普通会员打9折，vip会员打8折</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/27/09-54-25-e297aa4b1e21a484e2f66c6e8cf081c7-20221027095425-e080b2.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="大多数人的写法"><a href="#大多数人的写法" class="headerlink" title="大多数人的写法"></a>大多数人的写法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">TCustomerType</span> = <span class="hljs-string">&#x27;normal&#x27;</span> | <span class="hljs-string">&#x27;member&#x27;</span> | <span class="hljs-string">&#x27;vip&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">type</span>: TCustomerType</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = <span class="hljs-keyword">type</span><br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">amount: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;member&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> amount * <span class="hljs-number">0.9</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;vip&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> amount * <span class="hljs-number">0.8</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> amount<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;normal&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c.<span class="hljs-title function_">pay</span>(<span class="hljs-number">100</span>))<br><span class="hljs-keyword">let</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;member&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c2.<span class="hljs-title function_">pay</span>(<span class="hljs-number">100</span>))<br><span class="hljs-keyword">let</span> c3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;vip&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c2.<span class="hljs-title function_">pay</span>(<span class="hljs-number">100</span>))<br><br></code></pre></td></tr></table></figure><h4 id="利用策略模式的优化"><a href="#利用策略模式的优化" class="headerlink" title="利用策略模式的优化"></a>利用策略模式的优化</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>  constructor(public kind: <span class="hljs-type">Kind</span>) &#123;<br>  &#125;<br>  public cost(amount: number) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.kind.discount(amount)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kind</span> </span>&#123;<br>  <span class="hljs-keyword">abstract</span> discount(amounr: number): number<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Normal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Kind</span> </span>&#123;<br>  discount(amount: number) &#123;<br>    <span class="hljs-keyword">return</span> amount<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Kind</span> </span>&#123;<br>  discount(amount: number) &#123;<br>    <span class="hljs-keyword">return</span> amount * <span class="hljs-number">0.9</span><br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VIP</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Kind</span> </span>&#123;<br>  discount(amount: number) &#123;<br>    <span class="hljs-keyword">return</span> amount * <span class="hljs-number">0.8</span><br>  &#125;<br>&#125;<br>let c1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Customer</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Normal</span>())<br>console.log(c1.cost(<span class="hljs-number">100</span>))<br>c1.kind = <span class="hljs-keyword">new</span> <span class="hljs-type">Member</span>()<br>console.log(c1.cost(<span class="hljs-number">100</span>))<br>c1.kind = <span class="hljs-keyword">new</span> <span class="hljs-type">VIP</span>()<br>console.log(c1.cost(<span class="hljs-number">100</span>))<br><br></code></pre></td></tr></table></figure><p>在前端也把算法封装在策略对象中，指定算法调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">kinds</span> = &#123;<br>      <span class="hljs-attr">normal</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>        <span class="hljs-keyword">return</span> price<br>      &#125;,<br>      <span class="hljs-attr">member</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>        <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.9</span><br>      &#125;,<br>      <span class="hljs-attr">vip</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>        <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.8</span><br>      &#125;,<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">cost</span>(<span class="hljs-params">kind, amount</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">kinds</span>[kind](amount)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c.<span class="hljs-title function_">cost</span>(<span class="hljs-string">&quot;normal&quot;</span>, <span class="hljs-number">100</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c.<span class="hljs-title function_">cost</span>(<span class="hljs-string">&quot;member&quot;</span>, <span class="hljs-number">100</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c.<span class="hljs-title function_">cost</span>(<span class="hljs-string">&quot;vip&quot;</span>, <span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>多个算法只在行为上稍有不同的场景，这时可以使用策略模式来动态选择算法；</li><li>算法需要自由切换的场景；</li><li>有时需要多重条件判断，那么可以使用策略模式来规避多重条件判断的情况；</li></ul><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userForm&quot;</span>&gt;</span><br>    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    手机号 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mobile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    邮箱 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userForm&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> validator = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">//这是一个规则的数组</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> rules = &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">notEmpty</span>(<span class="hljs-params">val, msg</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (val === <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">minLength</span>(<span class="hljs-params">val, min, msg</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (val === <span class="hljs-string">&#x27;&#x27;</span> || val.<span class="hljs-property">length</span> &lt; min) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">maxLength</span>(<span class="hljs-params">val, max, msg</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (val === <span class="hljs-string">&#x27;&#x27;</span> || val.<span class="hljs-property">length</span> &gt; max) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">isMobile</span>(<span class="hljs-params">val, msg</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/1\d&#123;10&#125;/</span>.<span class="hljs-title function_">test</span>(val)) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">addRule</span>(<span class="hljs-params">name, rule</span>) &#123;</span><br><span class="language-javascript">        rules[name] = rule;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> checks = [];</span><br><span class="language-javascript">      <span class="hljs-comment">//增加校验的项目</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">element, rule</span>) &#123;</span><br><span class="language-javascript">        checks.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> val = element.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> name = rule.<span class="hljs-title function_">shift</span>();</span><br><span class="language-javascript">          rule.<span class="hljs-title function_">unshift</span>(val);<span class="hljs-comment">//[&#x27;value&#x27;,&#x27;用户名不能为空&#x27;]</span></span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> rules[name] &amp;&amp; rules[name].<span class="hljs-title function_">apply</span>(element, rule);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; checks.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> check = checks[i];</span><br><span class="language-javascript">          <span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">check</span>();</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (msg) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        addRule,</span><br><span class="language-javascript">        add,</span><br><span class="language-javascript">        start</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)();</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    validator.<span class="hljs-title function_">addRule</span>(<span class="hljs-string">&#x27;isEmail&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">val, msg</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/.*@.*/</span>.<span class="hljs-title function_">test</span>(val)) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> msg;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    form.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      validator.<span class="hljs-title function_">add</span>(form.<span class="hljs-property">username</span>, [<span class="hljs-string">&#x27;notEmpty&#x27;</span>, <span class="hljs-string">&#x27;用户名不能为空&#x27;</span>]);</span><br><span class="language-javascript">      validator.<span class="hljs-title function_">add</span>(form.<span class="hljs-property">password</span>, [<span class="hljs-string">&#x27;minLength&#x27;</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;密码长度不能少于6位&#x27;</span>]);</span><br><span class="language-javascript">      validator.<span class="hljs-title function_">add</span>(form.<span class="hljs-property">password</span>, [<span class="hljs-string">&#x27;maxLength&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;密码长度不能大于8位&#x27;</span>]);</span><br><span class="language-javascript">      validator.<span class="hljs-title function_">add</span>(form.<span class="hljs-property">mobile</span>, [<span class="hljs-string">&#x27;isMobile&#x27;</span>, <span class="hljs-string">&#x27;必须输入合法的手机号&#x27;</span>]);</span><br><span class="language-javascript">      validator.<span class="hljs-title function_">add</span>(form.<span class="hljs-property">email</span>, [<span class="hljs-string">&#x27;isEmail&#x27;</span>, <span class="hljs-string">&#x27;必须输入合法邮箱&#x27;</span>]);</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> msg = validator.<span class="hljs-title function_">start</span>();</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (msg) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(msg);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h2><p>策略模式将算法的实现和使用拆分，这个特点带来了很多优点：</p><ul><li>策略之间相互独立，但策略可以自由切换，这个策略模式的特点给策略模式带来很多灵活性，也提高了策略的复用率；</li><li>如果不采用策略模式，那么在选策略时一般会采用多重的条件判断，采用策略模式可以避免多重条件判断，增加可维护性；</li><li>可扩展性好，策略可以很方便的进行扩展；</li></ul><p>策略模式的缺点：</p><ul><li>策略相互独立，因此一些复杂的算法逻辑无法共享，造成一些资源浪费；</li><li>如果用户想采用什么策略，必须了解策略的实现，因此所有策略都需向外暴露，这是违背迪米特法则&#x2F;最少知识原则的，也增加了用户对策略对象的使用成本。</li></ul><h2 id="状态模式和策略模式异同"><a href="#状态模式和策略模式异同" class="headerlink" title="状态模式和策略模式异同"></a>状态模式和策略模式异同</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><ul><li>策略模式和状态模式都有上下文，有策略或者状态类，上下文把这些请求委托给这些类来执行</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>状态模式： 重在强调对象内部状态的变化改变对象的行为，状态类之间是平行的，无法相互替换；</li><li>策略模式： 策略的选择由外部条件决定，策略可以动态的切换，策略之间是平等的，可以相互替换；</li><li>状态模式的状态类是平行的，意思是各个状态类封装的状态和对应的行为是相互独立、没有关联的，封装的业务逻辑可能差别很大毫无关联，相互之间不可替换。但是策略模式中的策略是平等的，是同一行为的不同描述或者实现，在同一个行为发生的时候，可以根据外部条件挑选任意一个实现来进行处理。</li></ul>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计原则之迪米特法则</title>
    <link href="/blog/2022/10/07/design-rule-lod/"/>
    <url>/blog/2022/10/07/design-rule-lod/</url>
    
    <content type="html"><![CDATA[<h2 id="一-什么是迪米特法则"><a href="#一-什么是迪米特法则" class="headerlink" title="一. 什么是迪米特法则"></a>一. 什么是迪米特法则</h2><p>迪米特法则(Law of Demeter )又叫做最少知识原则，也就是说，一个对象应当对其他对象尽可能少的了解。不和陌生人说话。英文简写为: LoD。</p><p>迪米特法则的目的在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的友元类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度。</p><h2 id="二-为什么要遵守迪米特法则"><a href="#二-为什么要遵守迪米特法则" class="headerlink" title="二. 为什么要遵守迪米特法则?"></a>二. 为什么要遵守迪米特法则?</h2><p>在面向对象编程中有一些众所周知的抽象概念，比如封装、内聚和耦合，理论上可以用来生成清晰的设计和良好的代码。虽然这些都是非常重要的概念，但它们不够实用，不能直接用于开发环境，这些概念是比较主观的，非常依赖于使用人的经验和知识。对于其他概念，如单一责任原则、开闭原则等，情况也是一样的。迪米特法则的独特之处在于它简洁而准确的定义，它允许在编写代码时直接应用，几乎自动地应用了适当的封装、低内聚和松耦合。</p><h2 id="三-迪米特法则的广狭定义"><a href="#三-迪米特法则的广狭定义" class="headerlink" title="三. 迪米特法则的广狭定义"></a>三. 迪米特法则的广狭定义</h2><h3 id="3-1-狭义的迪米特法则"><a href="#3-1-狭义的迪米特法则" class="headerlink" title="3.1. 狭义的迪米特法则"></a>3.1. 狭义的迪米特法则</h3><p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p><p>朋友圈的确定“朋友”条件：</p><p> 1）当前对象本身（this）</p><p> 2）以参数形式传入到当前对象方法中的对象</p><p> 方法入参是一个对象, 这是这个对象和当前类是朋友</p><p> 3）当前对象的实例变量直接引用的对象</p><p> 定一个一个类, 里面的属性引用了其他对象, 那么这个对象的实例和当前实例是朋友</p><p> 4）当前对象的实例变量如果是一个聚集，那么聚集中的元素也都是朋友</p><p> 如果属性是一个对象, 那么属性和对象里的元素都是朋友</p><p> 5）当前对象所创建的对象</p><p>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”；否则就是“陌生人”</p><p>狭义的迪米特法则的缺点：</p><p>在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。<br>遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。</p><h3 id="3-2-广义的迪米特法则在类的设计上的体现"><a href="#3-2-广义的迪米特法则在类的设计上的体现" class="headerlink" title="3.2. 广义的迪米特法则在类的设计上的体现"></a>3.2. 广义的迪米特法则在类的设计上的体现</h3><ul><li>优先考虑将一个类设置成不变类。</li><li>尽量降低一个类的访问权限。</li><li>尽量降低成员的访问权限。</li></ul><h2 id="四-迪米特法则在设计模式中的应用"><a href="#四-迪米特法则在设计模式中的应用" class="headerlink" title="四. 迪米特法则在设计模式中的应用"></a>四. 迪米特法则在设计模式中的应用</h2><p>设计模式的门面模式（Facade）和中介模式（Mediator），都是迪米特法则的应用</p><p>下面我们已经租房为例, 来研究迪米特法则。</p><p>通常 客户要找房子住, 我们就直接建一个房子类, 建一个客户类, 客户找房子即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IHouse</span> &#123;<br>    <span class="hljs-comment">// 住房子</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Housing</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">House</span> <span class="hljs-title">implements</span> <span class="hljs-title">IHouse</span>&#123;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Housing</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;住房子&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findHourse</span>(<span class="hljs-params">IHouse house</span>)</span> &#123;<br>        house.Housing();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户找房子住, 逻辑很简单, 这样是ok的。虽然违背了迪米特法则, 但符合业务逻辑也说得通。</p><p>但是, 通常我们找房子, 不是一下子就能找到的, 我们要找很多家, 这就很费劲, 那不如交给中介。</p><p>中介有很多房源, 房东吧房子给了中介, 不需要关心租户是谁, 租户将找房的事交给房东, 他也不用管房东是谁, 而且租户+房东都很省事。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 房子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">IHouse</span> &#123;<br>    <span class="hljs-comment">// 住房子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> Housing();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">House</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IHouse</span>&#123;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> Housing() &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;住房子&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ICustomer</span> &#123;<br><br>    <span class="hljs-built_in">void</span> findHourse(IHouse house) ;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Customer</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">ICustomer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> findHourse(IHouse house) &#123;<br>        house.Housing();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中介</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Intermediary</span> &#123;<br>    <span class="hljs-comment">// 找房子</span><br>    <span class="hljs-keyword">public</span> IHouse findHouse(ICustomer customer)&#123;<br>        <span class="hljs-comment">// 帮租户找房子</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>房子,客户是相互独立的, 彼此之间没有引用。他们之间建立关系是通过中介。 也就是, 客户找中介租房子, 房东吧房子交给租户, 最后中介将找好的房子给到客户。客户和房东彼此隔离, 符合迪米特法则。</p><h2 id="五-迪米特法则实践"><a href="#五-迪米特法则实践" class="headerlink" title="五. 迪米特法则实践"></a>五. 迪米特法则实践</h2><p>那么在实践中如何做到一个对象应该对其他对象有最少的了解呢？</p><p>如果我们把一个对象看作是一个人，那么要实现“一个人应该对其他人有最少的了解”，做到两点就足够了：</p><ul><li><p>只和直接的朋友交流；</p></li><li><p>减少对朋友的了解。</p></li></ul><p> 下面就详细说说如何做到这两点。</p><ol><li>只和直接的朋友交流</li></ol><p>迪米特法则还有一个英文解释是：talk only to your immediate friends（只和直接的朋友交流）。</p><p>什么是朋友呢？</p><p>每个对象都必然会与其他的对象有耦合关系，两个对象之间的耦合就会成为朋友关系。那么什么又是直接的朋友呢？出现在成员变量、方法的输入输出参数中的类就是直接的朋友。迪米特法则要求只和直接的朋友通信。</p><blockquote><p>注意：</p></blockquote><blockquote><p>只出现在方法体内部的类就不是直接的朋友，如果一个类和不是直接的朋友进行交流，就属于违反迪米特法则。</p></blockquote><p>我们举一个例子说明什么是朋友，什么是直接的朋友。很简单的例子：老师让班长清点全班同学的人数。这个例子中总共有三个类：老师Teacher、班长GroupLeader和学生Student。</p> <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs haxe"> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacher</span> </span>&#123;<br>    void command(IGroupLeader groupLeader);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ITeacher</span></span></span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void command(IGroupLeader groupLeader) &#123;<br>        <span class="hljs-comment">// 全班同学</span><br>        List&lt;Student&gt; allStudent = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        <span class="hljs-comment">// 班长清点人数</span><br>        groupLeader.count(allStudent);<br><br>    &#125;<br>&#125;<br><br>**<br> * 班长类<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IGroupLeader</span> </span>&#123;<br><br>    <span class="hljs-comment">// 班长清点人数</span><br>    void count(List&lt;Student&gt; students);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GroupLeader</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">IGroupLeader</span></span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班长清点人数</span><br><span class="hljs-comment">     * @param students</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-keyword">public</span> void count(List&lt;Student&gt; students) &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        System.out.println(<span class="hljs-string">&quot;上课的学生人数是: &quot;</span> + students.size());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IStudent</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">IStudent</span></span> </span>&#123;<br><br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 老师类</span><br>        ITeacher wangTeacher = <span class="hljs-keyword">new</span> <span class="hljs-type">Teacher</span>();<br><br>        <span class="hljs-comment">// 班长</span><br>        IGroupLeader zhangBanzhang = <span class="hljs-keyword">new</span> <span class="hljs-type">GroupLeader</span>();<br>        wangTeacher.command(zhangBanzhang);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 运行结果:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">上课的学生人数是: 5</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们的Teacher有几个朋友？两个，一个是GroupLeader，它是Teacher的command()方法的入参；另一个是Student，因为在Teacher的command()方法体中使用了Student。</p><p>那么Teacher有几个是直接的朋友？按照直接的朋友的定义</p><blockquote><p>出现在成员变量、方法的输入输出参数中的类就是直接的朋友</p></blockquote><p>只有GroupLeader是Teacher的直接的朋友。</p><p>Teacher在command()方法中创建了Student的数组，和非直接的朋友Student发生了交流，所以，上述例子违反了迪米特法则。方法是类的一个行为，类竟然不知道自己的行为与其他的类产生了依赖关系，这是不允许的，严重违反了迪米特法则！</p><p>为了使上述例子符合迪米特法则，我们可以做如下修改：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacher</span> </span>&#123;<br>    void command(IGroupLeader groupLeader);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ITeacher</span></span> </span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void command(IGroupLeader groupLeader) &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        groupLeader.count();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IGroupLeader</span> </span>&#123;<br>    <span class="hljs-comment">// 班长清点人数</span><br>    void count();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 班长类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GroupLeader</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">IGroupLeader</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><br>    <span class="hljs-keyword">public</span> GroupLeader(List&lt;Student&gt; students) &#123;<br>        <span class="hljs-built_in">this</span>.students = students;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班长清点人数</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-keyword">public</span> void count() &#123;<br>        <span class="hljs-comment">// 班长清点人数</span><br>        System.out.println(<span class="hljs-string">&quot;上课的学生人数是: &quot;</span> + students.size());<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IStudent</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">IStudent</span></span> </span>&#123;<br><br><br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 老师类</span><br>        ITeacher wangTeacher = <span class="hljs-keyword">new</span> <span class="hljs-type">Teacher</span>();<br><br>        List&lt;Student&gt; allStudent = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>(<span class="hljs-number">10</span>);<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br>        allStudent.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>());<br><br>        <span class="hljs-comment">// 班长</span><br>        IGroupLeader zhangBanzhang = <span class="hljs-keyword">new</span> <span class="hljs-type">GroupLeader</span>(allStudent);<br>        wangTeacher.command(zhangBanzhang);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">上课的学生人数是: 4</span><br></code></pre></td></tr></table></figure><p>这样修改后，每个类都只和直接的朋友交流，有效减少了类之间的耦合</p><ol start="2"><li>减少对朋友的了解</li></ol><p>如何减少对朋友的了解？如果你的朋友是个话痨加大喇叭，那就算你不主动去问他，他也会在你面前说个不停，把他所有的经历都讲给你听。所以，要减少对朋友的了解，请换一个内敛一点的朋友吧～换作在一个类中，就是尽量减少一个类对外暴露的方法。</p><p>举一个简单的例子说明一个类暴露方法过多的情况。一个人用咖啡机煮咖啡的过程，例子中只有两个类，一个是人，一个是咖啡机。</p><p>首先是咖啡机类CoffeeMachine，咖啡机制作咖啡只需要三个方法：1.加咖啡豆；2.加水；3.制作咖啡：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机抽象接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCoffeeBean</span>()</span>;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addWater</span>()</span>;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeMachine</span> <span class="hljs-title">implements</span> <span class="hljs-title">ICoffeeMachine</span>&#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCoffeeBean</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;放咖啡豆&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addWater</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;加水&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;制作咖啡&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人, 制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IMan</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-title">implements</span> <span class="hljs-title">IMan</span> &#123;<br>    <span class="hljs-keyword">private</span> ICoffeeMachine coffeeMachine;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Man</span>(<span class="hljs-params">ICoffeeMachine coffeeMachine</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.coffeeMachine = coffeeMachine;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span> &#123;<br>        coffeeMachine.addWater();<br>        coffeeMachine.addCoffeeBean();<br>        coffeeMachine.makeCoffee();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        ICoffeeMachine coffeeMachine = <span class="hljs-keyword">new</span> CoffeeMachine();<br><br>        IMan man = <span class="hljs-keyword">new</span> Man(coffeeMachine);<br>        man.makeCoffee();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs"><br>加水<br><br>放咖啡豆<br><br>制作咖啡<br></code></pre></td></tr></table></figure><p>在这个例子中，CoffeeMachine是Man的直接好友，但问题是Man对CoffeeMachine了解的太多了，其实人根本不关心咖啡机具体制作咖啡的过程。所以我们可以作如下优化：</p><p>优化后的咖啡机类，只暴露一个work方法，把制作咖啡的三个具体的方法addCoffeeBean、addWater、makeCoffee设为私有:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机抽象接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//咖啡机工作</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span>()</span>;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 咖啡机实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CoffeeMachine</span> <span class="hljs-title">implements</span> <span class="hljs-title">ICoffeeMachine</span> &#123;<br><br>    <span class="hljs-comment">//加咖啡豆</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCoffeeBean</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;放咖啡豆&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//加水</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addWater</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;加水&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//制作咖啡</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;制作咖啡&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span>()</span> &#123;<br>        addCoffeeBean();<br>        addWater();<br>        makeCoffee();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人, 制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IMan</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人制作咖啡</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-title">implements</span> <span class="hljs-title">IMan</span> &#123;<br>    <span class="hljs-keyword">private</span> ICoffeeMachine coffeeMachine;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Man</span>(<span class="hljs-params">ICoffeeMachine coffeeMachine</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.coffeeMachine = coffeeMachine;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 制作咖啡</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeCoffee</span>()</span> &#123;<br>        coffeeMachine.work();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        ICoffeeMachine coffeeMachine = <span class="hljs-keyword">new</span> CoffeeMachine();<br><br>        IMan man = <span class="hljs-keyword">new</span> Man(coffeeMachine);<br>        man.makeCoffee();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样修改后，通过减少CoffeeMachine对外暴露的方法，减少Man对CoffeeMachine的了解，从而降低了它们之间的耦合。</p><p>在实践中，只要做到只和直接的朋友交流和减少对朋友的了解，就能满足迪米特法则。因此我们不难想象，迪米特法则的目的，是把我们的类变成一个个“肥宅”。“肥”在于一个类对外暴露的方法可能很少，但是它内部的实现可能非常复杂（这个解释有点牵强~）。“宅”在于它只和直接的朋友交流。在现实生活中“肥宅”是个贬义词，在日本“肥宅”已经成为社会问题。但是在程序中，一个“肥宅”的类却是优秀类的典范</p><h2 id="六-注意事项"><a href="#六-注意事项" class="headerlink" title="六. 注意事项"></a>六. 注意事项</h2><ul><li>第一：在类的划分上，应当创建弱耦合的类，类与类之间的耦合越弱，就越有利于实现可复用的目标。</li><li>第二：在类的结构设计上，每个类都应该降低成员的访问权限。</li><li>第三：在类的设计上，只要有可能，一个类应当设计成不变的类。</li><li>第四：在对其他类的引用上，一个对象对其他类的对象的引用应该降到最低。</li><li>第五：尽量限制局部变量的有效范围，降低类的访问权限。</li></ul>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计原则之依赖倒置</title>
    <link href="/blog/2022/10/07/design-rule-dip/"/>
    <url>/blog/2022/10/07/design-rule-dip/</url>
    
    <content type="html"><![CDATA[<h2 id="一-什么是依赖倒置原则"><a href="#一-什么是依赖倒置原则" class="headerlink" title="一. 什么是依赖倒置原则"></a>一. 什么是依赖倒置原则</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>依赖倒置原则(Dependence Inversion Principle, DIP), 其含义:</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li><li>抽象不应该依赖细节, 细节应该依赖于抽象</li><li>要针对接口编程，不要针对实现编程</li></ul><h3 id="1-2-什么是依赖"><a href="#1-2-什么是依赖" class="headerlink" title="1.2 什么是依赖"></a>1.2 什么是依赖</h3><p>这里的依赖关系我们理解为UML关系中的依赖。简单的说就是A use B，那么A对B产生了依赖。具体请看下面的例子。</p><p>从上图中我们可以发现, 类A中的方法a()里面用到了类B, 其实这就是依赖关系, A依赖了B. 需要注意的是: 并不是说A中声明了B就叫依赖, 如果引用了但是没有真实调用方法, 那么叫做零耦合关系. 如下图:</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/04/13-15-46-cb93cafee5c7141195ad93785db01aa3-20221004131546-ffe8c1.png"></p><h3 id="1-3-依赖的关系种类"><a href="#1-3-依赖的关系种类" class="headerlink" title="1.3 依赖的关系种类"></a>1.3 依赖的关系种类</h3><h4 id="1-零耦合关系：如果两个类之间没有耦合关系，称之为零耦合"><a href="#1-零耦合关系：如果两个类之间没有耦合关系，称之为零耦合" class="headerlink" title="1. 零耦合关系：如果两个类之间没有耦合关系，称之为零耦合"></a>1. 零耦合关系：如果两个类之间没有耦合关系，称之为零耦合</h4><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/04/13-36-53-f7cc21f00a0f687fb452df6cc3cc0ef4-20221004133652-221382.png"></p><h4 id="2-直接耦合关系-具体耦合发生在两个具体类（可实例化的）之间，经由一个类对另一个类的直接引用造成。"><a href="#2-直接耦合关系-具体耦合发生在两个具体类（可实例化的）之间，经由一个类对另一个类的直接引用造成。" class="headerlink" title="2. 直接耦合关系: 具体耦合发生在两个具体类（可实例化的）之间，经由一个类对另一个类的直接引用造成。"></a>2. 直接耦合关系: 具体耦合发生在两个具体类（可实例化的）之间，经由一个类对另一个类的直接引用造成。</h4><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/04/13-38-35-08842da0a9f62f2fa2e4c401daec3732-20221004133834-e25ad8.png"></p><h4 id="3-抽象耦合关系-抽象耦合关系发生在一个具体类和一个抽象类（或者接口）之间，使两个必须发生关系的类之间存在最大的灵活性。"><a href="#3-抽象耦合关系-抽象耦合关系发生在一个具体类和一个抽象类（或者接口）之间，使两个必须发生关系的类之间存在最大的灵活性。" class="headerlink" title="3. 抽象耦合关系: 抽象耦合关系发生在一个具体类和一个抽象类（或者接口）之间，使两个必须发生关系的类之间存在最大的灵活性。"></a>3. 抽象耦合关系: 抽象耦合关系发生在一个具体类和一个抽象类（或者接口）之间，使两个必须发生关系的类之间存在最大的灵活性。</h4><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/07/09-29-32-a9e89ae9946cb4409c72cc49a5f60c45-20221007092931-fda3b3.png"></p><p>依赖倒转原则就是要针对接口编程，不要针对实现编程。这就是说，应当使用接口或者抽象类进行变量的类型声明，参数的类型声明，方法的返回类型说明，以及数据类型的转换等。</p><h2 id="二-依赖倒置的案例"><a href="#二-依赖倒置的案例" class="headerlink" title="二. 依赖倒置的案例"></a>二. 依赖倒置的案例</h2><h3 id="2-1-初步设计方案"><a href="#2-1-初步设计方案" class="headerlink" title="2.1 初步设计方案"></a>2.1 初步设计方案</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Benz</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;奔驰跑起来了!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Driver</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">driver</span>(<span class="hljs-params">Benz benz</span>) &#123;<br>        benz.<span class="hljs-title function_">run</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Benz</span> benz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Benz</span>();<br>        <span class="hljs-title class_">Driver</span> driver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        driver.<span class="hljs-title function_">driver</span>(benz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有一个驾驶员张三可以驾驶奔驰汽车, 于是最开始我们思考, 会有一个驾驶员类, 有一个奔驰汽车类. 随着业务的发展, 我们发现, 驾驶员张三还可以驾驶宝马.</p><p>于是,我们定义一个BM类,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BM</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;宝马跑起来了!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时, 张三如果想要开宝马, 就要将宝马注册在他名下.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Driver</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">driver</span>(<span class="hljs-params">Benz benz</span>) &#123;<br>        benz.<span class="hljs-title function_">run</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">driver</span>(<span class="hljs-params">BM bm</span>) &#123;<br>        bm.<span class="hljs-title function_">run</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Benz</span> benz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Benz</span>();<br>        <span class="hljs-variable constant_">BM</span> bm = <span class="hljs-keyword">new</span> <span class="hljs-title function_">BM</span>();<br>        <span class="hljs-title class_">Driver</span> driver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        driver.<span class="hljs-title function_">driver</span>(benz);<br>        driver.<span class="hljs-title function_">driver</span>(bm);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>似乎这样就可以了, 但是这样有什么问题呢?</p><ul><li>如果张三有一天要开大众, 还要增加一个大众车类, 同时还得挂载司机名下.</li><li>不是所有的人都要开奔驰, 开宝马. 开大众.</li></ul><p>这就是面向实现编程的问题, 接下来我们就要考虑面向接口编程.</p><h3 id="2-2-改进后的方案"><a href="#2-2-改进后的方案" class="headerlink" title="2.2 改进后的方案"></a>2.2 改进后的方案</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICar</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Benz</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICar</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;奔驰跑起来了!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BM</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICar</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;宝马跑起来了!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IDriver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">driver</span>(<span class="hljs-title class_">ICar</span> car);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDriver</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">driver</span>(<span class="hljs-params">ICar car</span>) &#123;<br>        car.<span class="hljs-title function_">run</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">IDriver</span> driver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br>        driver.<span class="hljs-title function_">driver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Benz</span>());<br>        driver.<span class="hljs-title function_">driver</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">BM</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的代码, 提炼出来一个IDriver接口和ICar接口, 面向接口编程. IDriver的实现类驾驶员可以driver任何类型的汽车, 所以传入参数也是一个接口ICar. 任何类型的汽车, 都可以通过实现ICar接口注册为一种新的汽车类型. 当客户端调用的时候, 将对应的汽车传入就可以了.</p><h2 id="三-依赖的方式"><a href="#三-依赖的方式" class="headerlink" title="三. 依赖的方式"></a>三. 依赖的方式</h2><h3 id="3-1-依赖注入主要有三种方式："><a href="#3-1-依赖注入主要有三种方式：" class="headerlink" title="3.1 依赖注入主要有三种方式："></a>3.1 依赖注入主要有三种方式：</h3><h4 id="1-构造注入，在构造的时候注入依赖"><a href="#1-构造注入，在构造的时候注入依赖" class="headerlink" title="1. 构造注入，在构造的时候注入依赖"></a>1. 构造注入，在构造的时候注入依赖</h4><p>在类中通过构造函数声明依赖对象，按照依赖注入的说法，这种方式叫做构造函数注入，按照这种方式的注入，对IDriver和Driver进行修改。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">IDriver</span> &#123; <span class="hljs-comment">//司机就会开车 public void drive(); </span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Driver</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IDriver</span>&#123;<br>  <span class="hljs-keyword">private</span> ICar car; <span class="hljs-comment">//构造函数注入 </span><br>  <span class="hljs-keyword">public</span> Driver(ICar _car)&#123; <span class="hljs-keyword">this</span>.car = _car; &#125;<br>  <span class="hljs-comment">//司机的主要职责就是驾驶汽车 </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> drive()&#123; <span class="hljs-keyword">this</span>.car.run(); &#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Setter方法注入"><a href="#2-Setter方法注入" class="headerlink" title="2. Setter方法注入"></a>2. Setter方法注入</h4><p>在抽象中设置Setter方法声明依赖关系，依照依赖注入的说法，这是Setter依赖注入，按照这种方式的注入，对IDriver和Driver进行修改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IDriver</span> &#123; <span class="hljs-comment">//车辆型号 </span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span>(<span class="hljs-params">ICar car</span>)</span>;<br> <span class="hljs-comment">//是司机就应该会驾驶汽车</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drive</span>()</span>; <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> <span class="hljs-title">implements</span> <span class="hljs-title">IDriver</span>&#123;<br>  <span class="hljs-keyword">private</span> ICar car; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span>(<span class="hljs-params">ICar car</span>)</span>&#123; <span class="hljs-keyword">this</span>.car = car; &#125;<br><br> <span class="hljs-comment">//司机的主要职责就是驾驶汽车</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drive</span>()</span>&#123; <span class="hljs-keyword">this</span>.car.run();<br>  &#125; <br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-接口声明依赖对象"><a href="#3-接口声明依赖对象" class="headerlink" title="3. 接口声明依赖对象"></a>3. 接口声明依赖对象</h4><p>在接口的方法中声明依赖对象，未修改的IDriver和Driver就采用了接口声明依赖的方式，该方法也叫做接口注入。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">IDriver</span> &#123; <br> <span class="hljs-comment">//老司机，会开车</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> drive(ICar car); <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Driver</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IDriver</span>&#123; <span class="hljs-comment">//司机的主要职责就是驾驶汽车  public void drive(ICar car)&#123; car.run(); &#125; </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-依赖倒置原则在设计模式中的体现"><a href="#3-2-依赖倒置原则在设计模式中的体现" class="headerlink" title="3.2 依赖倒置原则在设计模式中的体现"></a>3.2 依赖倒置原则在设计模式中的体现</h3><ul><li>简单工厂设计模式, 使用的是接口方法中注入</li><li>策略设计模式: 在构造函数中注入.</li></ul>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计原则之里氏替换原则</title>
    <link href="/blog/2022/10/04/disign-rule-Liskov/"/>
    <url>/blog/2022/10/04/disign-rule-Liskov/</url>
    
    <content type="html"><![CDATA[<h2 id="一、里氏替换的定义"><a href="#一、里氏替换的定义" class="headerlink" title="一、里氏替换的定义"></a>一、里氏替换的定义</h2><h3 id="1-1-里式替换原则定义"><a href="#1-1-里式替换原则定义" class="headerlink" title="1.1 里式替换原则定义"></a>1.1 里式替换原则定义</h3><p>里氏替换原则（Liskov Substitution Principle, LSP）也叫里氏代换原则；里氏替换原则最早是在1988年，由麻省理工学院的一位姓里的女士（Barbara Liskov）提出来的。</p><h4 id="定义一："><a href="#定义一：" class="headerlink" title="定义一："></a>定义一：</h4><blockquote><p>If S is a subtype of T, then objects of type T may be replaced with objects of type S, without breaking the program。</p></blockquote><blockquote><p>如果S是T的子类，则T的对象可以替换为S的对象，而不会破坏程序。</p></blockquote><h4 id="定义二："><a href="#定义二：" class="headerlink" title="定义二："></a>定义二：</h4><blockquote><p>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it。</p></blockquote><blockquote><p>所有引用其父类对象方法的地方，都可以透明的替换为其子类对象。</p></blockquote><h3 id="1-2-里氏替换原则的两个含义："><a href="#1-2-里氏替换原则的两个含义：" class="headerlink" title="1.2 里氏替换原则的两个含义："></a>1.2 里氏替换原则的两个含义：</h3><ul><li><p>里氏替换原则是针对继承而言的，继承是为了实现代码重用，也就是为了共享方法，那么共享的父类方法就应该保持不变，不能被子类重新定义。子类只能通过新添加方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方，子类也可以调用同一个继承得来的，逻辑和父类一致的方法，这时用子类对象将父类对象替换掉时，因为逻辑一致，所以相安无事。</p></li><li><p>如果继承的目的是为了多态，而多态的前提就是子类覆盖并重新定义父类的方法，为了符合LSP，我们应该将父类定义为抽象类，并定义抽象方法，让子类重新定义这些方法，当父类是抽象类时，父类就是不能实例化，所以也不存在可实例化的父类对象在程序里。也就不存在子类替换父类实例（根本不存在父类实例了）时逻辑不一致的可能。</p></li></ul><p>不符合LSP的最常见的情况是，父类和子类都是可实例化的非抽象类，且父类的方法被子类重新定义，这一类的实现继承会造成父类和子类间的强耦合，也就是实际上并不相关的属性和方法牵强附会在一起，不利于程序扩展和维护。</p><h2 id="二、里氏替换的目的"><a href="#二、里氏替换的目的" class="headerlink" title="二、里氏替换的目的"></a>二、里氏替换的目的</h2><p>采用里氏替换原则就是为了减少继承带来的缺点，增强程序的健壮性，版本升级时也可以保持良好的兼容性。即使增加子类，原有的子类也可以继续运行。</p><h2 id="三、里式替换原则与继承多态之间的关系"><a href="#三、里式替换原则与继承多态之间的关系" class="headerlink" title="三、里式替换原则与继承多态之间的关系"></a>三、里式替换原则与继承多态之间的关系</h2><p>里式替换原则和继承多态有关系, 但是他俩并不是一回事. 我们来看看下面的案例</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> void <span class="hljs-keyword">set</span>(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Redis</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Cache</span></span> </span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void <span class="hljs-keyword">set</span>(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memcache</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Cache</span></span> </span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void <span class="hljs-keyword">set</span>(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 父类对象都可以接收子类对象</span><br>        Cache cache = <span class="hljs-keyword">new</span> <span class="hljs-type">Cache</span>();<br>        cache.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key123&quot;</span>, <span class="hljs-string">&quot;key123&quot;</span>);<br><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-type">Redis</span>();<br>        cache.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key123&quot;</span>, <span class="hljs-string">&quot;key123&quot;</span>);<br><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-type">Memcache</span>();<br>        cache.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key123&quot;</span>, <span class="hljs-string">&quot;key123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面的例子, 可以看出Cache是父类, Redis 和 Memcache是子类, 他们继承自Cache. 这是继承和多态的思想. 而且这两个子类目前为止也都符合里式替换原则.可以替换父类出现的任何位置，并且原来代码的逻辑行为不变且正确性也没有被破坏。</p><p>看最后的CacheTest类, 我们使用父类的cache可以接收任何一种类型的缓存对象, 包括父类和子类。</p><p>但如果我们对Redis中的set方法做了长度校验</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Redis</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Cache</span></span></span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> void <span class="hljs-keyword">set</span>(<span class="hljs-keyword">String</span> key, <span class="hljs-keyword">String</span> value) &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || key.length() &lt; <span class="hljs-number">10</span> || key.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;key的长度不符合要求&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">IllegalArgumentException</span>(key的长度不符合要求);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">// 父类对象都可以接收子类对象</span><br>        Cache cache = <span class="hljs-keyword">new</span> <span class="hljs-type">Cache</span>();<br>        cache.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key123&quot;</span>, <span class="hljs-string">&quot;key123&quot;</span>);<br><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-type">Redis</span>();<br>        cache.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;key123&quot;</span>, <span class="hljs-string">&quot;key123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上情况, 如果我们使用父类对象时替换成子类对象, 那么就会抛出异常. 程序的逻辑行为就发生了变化，虽然改造之后的代码仍然可以通过子类来替换父类 ，但是，从设计思路上来讲，Redis子类的设计是不符合里式替换原则的。</p><p>继承和多态是面向对象语言所提供的一种语法，是代码实现的思路，而里式替换则是一种思想，一种设计原则，是用来指导继承关系中子类该如何设计的，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑以及不破坏原有程序的正确性。</p><h2 id="四、里式替换的规则"><a href="#四、里式替换的规则" class="headerlink" title="四、里式替换的规则"></a>四、里式替换的规则</h2><p>里式替换原则的核心就是“约定”，父类与子类的约定。里氏替换原则要求子类在进行设计的时候要遵守父类的一些行为约定。这里的行为约定包括：函数所要实现的功能，对输入、输出、异常的约定，甚至包括注释中一些特殊说明等。</p><h3 id="4-1-子类方法不能违背父类方法对输入输出异常的约定"><a href="#4-1-子类方法不能违背父类方法对输入输出异常的约定" class="headerlink" title="4.1 子类方法不能违背父类方法对输入输出异常的约定"></a>4.1 子类方法不能违背父类方法对输入输出异常的约定</h3><h4 id="1-前置条件不能被加强"><a href="#1-前置条件不能被加强" class="headerlink" title="1. 前置条件不能被加强"></a>1. 前置条件不能被加强</h4><p>前置条件即输入参数是不能被加强的，就像上面Cache的示例，Redis子类对输入参数Key的要求进行了加强，此时在调用处替换父类对象为子类对象就可能引发异常。</p><p>也就是说，子类对输入的数据的校验比父类更加严格，那子类的设计就违背了里式替换原则。</p><h4 id="2-后置条件不能被削弱"><a href="#2-后置条件不能被削弱" class="headerlink" title="2. 后置条件不能被削弱"></a>2. 后置条件不能被削弱</h4><p>后置条件即输出，假设我们的父类方法约定输出参数要大于0，调用父类方法的程序根据约定对输出参数进行了大于0的验证。而子类在实现的时候却输出了小于等于0的值。此时子类的涉及就违背了里氏替换原则</p><h3 id="3-不能违背对异常的约定"><a href="#3-不能违背对异常的约定" class="headerlink" title="3. 不能违背对异常的约定"></a>3. 不能违背对异常的约定</h3><p>在父类中，某个函数约定，只会抛出 ArgumentNullException 异常， 那子类的设计实现中只允许抛出 ArgumentNullException 异常，任何其他异常的抛出，都会导致子类违背里式替换原则。</p><h3 id="4-2-子类方法不能违背父类方法定义的功能"><a href="#4-2-子类方法不能违背父类方法定义的功能" class="headerlink" title="4.2 子类方法不能违背父类方法定义的功能"></a>4.2 子类方法不能违背父类方法定义的功能</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">BigDecimal</span> amount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Calendar</span> createTime;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">BigDecimal</span> <span class="hljs-title function_">getAmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> amount;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAmount</span>(<span class="hljs-params">BigDecimal amount</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> = amount;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Calendar</span> <span class="hljs-title function_">getCreateTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCreateTime</span>(<span class="hljs-params">Calendar createTime</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductSort</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Sort</span>&lt;<span class="hljs-title class_">Product</span>&gt; &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sortByAmount</span>(<span class="hljs-params">List&lt;Product&gt; list</span>) &#123;<br>        <span class="hljs-comment">//根据时间进行排序</span><br>        list.<span class="hljs-title function_">sort</span>((h1, h2)-&gt;h1.<span class="hljs-title function_">getCreateTime</span>().<span class="hljs-title function_">compareTo</span>(h2.<span class="hljs-title function_">getCreateTime</span>()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>父类中提供的 sortByAmount() 排序函数，是按照金额从小到大来进行排序的，而子类重写这个 sortByAmount() 排序函数之后，却是是按照创建日期来进行排序的。那子类的设计就违背里式替换原则。</p><p>实际上对于如何验证子类设计是否符合里氏替换原则其实有一个小技巧，那就是你可以使用父类的单测来运行子类的代码，如果不可以正常运行，那么你就要考虑一下自己的设计是否合理了！</p><h3 id="4-3-子类必须完全实现父类的抽象方法"><a href="#4-3-子类必须完全实现父类的抽象方法" class="headerlink" title="4.3 子类必须完全实现父类的抽象方法"></a>4.3 子类必须完全实现父类的抽象方法</h3><p>如果你设计的子类不能完全实现父类的抽象方法那么你的设计就不满足里式替换原则。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 定义抽象类枪</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AbstractGun</span>&#123;<br>    <span class="hljs-comment">// 射击</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shoot</span>()</span>;<br>    <br>    <span class="hljs-comment">// 杀人</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kill</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如我们定义了一个抽象的枪类，可以射击和杀人。无论是步枪还是手枪都可以射击和杀人，我们可以定义子类来继承父类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 定义手枪，步枪，机枪</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handgun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractGun</span></span>&#123;   <br>    public void shoot()&#123;  <br>         <span class="hljs-comment">// 手枪射击</span><br>    &#125;<br>    <br>    public void kill()&#123;    <br>        <span class="hljs-comment">// 手枪杀人</span><br>    &#125;<br>&#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rifle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractGun</span></span>&#123;<br>    public void shoot()&#123;<br>         <span class="hljs-comment">// 步枪射击</span><br>    &#125;<br>    <br>    public void kill()&#123;    <br>         <span class="hljs-comment">// 步枪杀人</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果我们在这个继承体系内加入一个玩具枪，就会有问题了，因为玩具枪只能射击，不能杀人。但是很多人写代码经常会这么写。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToyGun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractGun</span></span>&#123;<br>    public void shoot()&#123;<br>        <span class="hljs-comment">// 玩具枪射击</span><br>    &#125;<br>    <br>    public void kill()&#123; <br>        <span class="hljs-comment">// 因为玩具枪不能杀人，就返回空，或者直接throw一个异常出去</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Exception</span>(<span class="hljs-string">&quot;我是个玩具枪，惊不惊喜，意不意外，刺不刺激？&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时，我们如果把使用父类对象的地方替换为子类对象，显然是会有问题的(士兵上战场结果发现自己拿的是个玩具)。</p><p>而这种情况不仅仅不满足里氏替换原则，也不满足接口隔离原则，对于这种场景可以通过 ** 接口隔离+委托** 的方式来解决。</p><h2 id="五、里氏替换原则的作用"><a href="#五、里氏替换原则的作用" class="headerlink" title="五、里氏替换原则的作用"></a>五、里氏替换原则的作用</h2><ul><li>里氏替换原则是实现开闭原则的重要方式之一。</li><li>它克服了继承中重写父类造成的可复用性变差的缺点。</li><li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li><li>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</li></ul><p>尽量不要从可实例化的父类中继承，而是要使用基于抽象类和接口的继承。</p><h2 id="六、-里氏替换原则的实现方法"><a href="#六、-里氏替换原则的实现方法" class="headerlink" title="六、 里氏替换原则的实现方法"></a>六、 里氏替换原则的实现方法</h2><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>根据上述理解，对里氏替换原则的定义可以总结如下：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li><li>当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的的输出&#x2F;返回值）要比父类的方法更严格或相等</li></ul><p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系。</p><p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等。</p><h2 id="七、案例分析"><a href="#七、案例分析" class="headerlink" title="七、案例分析"></a>七、案例分析</h2><h3 id="案例一-两数相减"><a href="#案例一-两数相减" class="headerlink" title="案例一: 两数相减"></a>案例一: 两数相减</h3><p>当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。</p><p>继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p><blockquote><p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">func1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a-b;<br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span>&#123;<br>A a = <span class="hljs-keyword">new</span> A();<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;100-50=&quot;</span>+a.func1(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>));<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;100-80=&quot;</span>+a.func1(<span class="hljs-number">100</span>, <span class="hljs-number">80</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">100</span>-<span class="hljs-number">50</span>=<span class="hljs-number">50</span><br><span class="hljs-attribute">100</span>-<span class="hljs-number">80</span>=<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>后来，我们需要增加一个新的功能：完成两数相加，然后再与100求和，由类B来负责。即类B需要完成两个功能：</p><ul><li>两数相减。</li><li>两数相加，然后再加100。</li></ul><p>由于类A已经实现了第一个功能，所以类B继承类A后，只需要再完成第二个功能就可以了，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-title">extends</span> <span class="hljs-title">A</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">func1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">func2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> func1(a,b)+<span class="hljs-number">100</span>;<br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span>&#123;<br>B b = <span class="hljs-keyword">new</span> B();<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;100-50=&quot;</span>+b.func1(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>));<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;100-80=&quot;</span>+b.func1(<span class="hljs-number">100</span>, <span class="hljs-number">80</span>));<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;100+20+100=&quot;</span>+b.func2(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>类B完成后，运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">100</span>-<span class="hljs-number">50</span>=<span class="hljs-number">150</span><br><span class="hljs-attribute">100</span>-<span class="hljs-number">80</span>=<span class="hljs-number">180</span><br><span class="hljs-attribute">100</span>+<span class="hljs-number">20</span>+<span class="hljs-number">100</span>=<span class="hljs-number">220</span><br></code></pre></td></tr></table></figure><p>我们发现原本运行正常的相减功能发生了错误。原因就是类B在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类B重写后的方法，造成原本运行正常的功能出现了错误。在本例中，引用基类A完成的功能，换成子类B之后，发生了异常。在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</p><h3 id="案例二-“几维鸟不是鸟”"><a href="#案例二-“几维鸟不是鸟”" class="headerlink" title="案例二: “几维鸟不是鸟”"></a>案例二: “几维鸟不是鸟”</h3><p>需求分析: 鸟通常都是会飞的, 比如燕子每小时120千米, 但是新西兰的几维鸟由于翅膀退化不会飞. 假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图 1 所示。</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/04/10-17-00-2635dfd2beed32cc20311e68bdc18db4-20221004101659-1be3aa.png"></p><p>源码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 鸟</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> &#123;<br>    <span class="hljs-comment">// 飞行的速度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> flySpeed;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlySpeed</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> flySpeed</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.flySpeed = flySpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getFlyTime</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> distance</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> distance/flySpeed;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 燕子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Swallow</span> <span class="hljs-title">extends</span> <span class="hljs-title">Bird</span>&#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 几维鸟</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Kiwi</span> <span class="hljs-title">extends</span> <span class="hljs-title">Bird</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlySpeed</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> flySpeed</span>)</span> &#123;<br>        flySpeed = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 测试飞行耗费时间</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BirdTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        Bird bird1 = <span class="hljs-keyword">new</span> Swallow();<br>        Bird bird2 = <span class="hljs-keyword">new</span> Kiwi();<br>        bird1.setFlySpeed(<span class="hljs-number">120</span>);<br>        bird2.setFlySpeed(<span class="hljs-number">120</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;如果飞行300公里：&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;燕子花费&quot;</span> + bird1.getFlyTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时.&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;几维花费&quot;</span> + bird2.getFlyTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时。&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception err) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;发生错误了!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">如果飞行<span class="hljs-number">300</span>公里：<br>燕子花费<span class="hljs-number">2.5</span>小时.<br>几维花费<span class="hljs-literal">Infinity</span>小时。<br></code></pre></td></tr></table></figure><p>程序运行错误的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为 0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间。其类图如图 2 所示。</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/04/10-18-27-29b90e34495cb07c425c3fd0961c5d5b-20221004101826-20631d.png"></p><p>源代码实现如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动物</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> runSpeed;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getRunTime</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> distance</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> distance/runSpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRunSpeed</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> runSpeed</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.runSpeed = runSpeed;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 鸟</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> &#123;<br>    <span class="hljs-comment">// 飞行的速度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> flySpeed;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlySpeed</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> flySpeed</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.flySpeed = flySpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getFlyTime</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> distance</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> distance/flySpeed;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 燕子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Swallow</span> <span class="hljs-title">extends</span> <span class="hljs-title">Bird</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 几维鸟</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Kiwi</span> <span class="hljs-title">extends</span> <span class="hljs-title">Animal</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRunSpeed</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> runSpeed</span>)</span> &#123;<br>        super.setRunSpeed(runSpeed);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 测试飞行耗费时间</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BirdTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        Bird bird1 = <span class="hljs-keyword">new</span> Swallow();<br>        Animal bird2 = <span class="hljs-keyword">new</span> Kiwi();<br>        bird1.setFlySpeed(<span class="hljs-number">120</span>);<br>        bird2.setRunSpeed(<span class="hljs-number">110</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;如果飞行300公里：&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;燕子花费&quot;</span> + bird1.getFlyTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时.&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;几维鸟花费&quot;</span> + bird2.getRunTime(<span class="hljs-number">300</span>) + <span class="hljs-string">&quot;小时。&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception err) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;发生错误了!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">如果飞行<span class="hljs-number">300</span>公里：<br> 燕子花费<span class="hljs-number">2.5</span>小时.<br> 几维鸟花费<span class="hljs-number">2.727272727272727</span>小时。<br></code></pre></td></tr></table></figure><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>面向对象的编程思想中提供了继承和多态是我们可以很好的实现代码的复用性和可扩展性，但继承并非没有缺点，因为继承的本身就是具有侵入性的，如果使用不当就会大大增加代码的耦合性，而降低代码的灵活性，增加我们的维护成本，然而在实际使用过程中却往往会出现滥用继承的现象，而里式替换原则可以很好的帮助我们在继承关系中进行父子类的设计。</p>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之装饰器模式</title>
    <link href="/blog/2022/10/02/design-pattern-decorator/"/>
    <url>/blog/2022/10/02/design-pattern-decorator/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是装饰器模式"><a href="#什么是装饰器模式" class="headerlink" title="什么是装饰器模式"></a>什么是装饰器模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>装饰器模式（Decorator Pattern） 也称为包装模式(Wrapper Pattern) 是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)，属于结构型模式。装饰器模式的核心是功能扩展，使用装饰器模式可以透明且动态地扩展类的功能。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>最直观地就是我们买房后的装修</li><li>装饰比继承更加灵活,可以实现装饰者和被装饰者之间松耦合</li><li>被装饰者可以使用装饰者动态地增加和撤销功能</li></ul><h2 id="装饰器模式的角色组成"><a href="#装饰器模式的角色组成" class="headerlink" title="装饰器模式的角色组成"></a>装饰器模式的角色组成</h2><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/27/13-07-05-63c5650d75d672eb4c4e46b12ec3dc68-20221027130705-2aecc4.png"></p><ul><li>抽象组件（Component）： 可以是一个接口或者抽象类，其充当被装饰类的原始对象，规定了被装饰对象的行为</li><li>具体组件（ConcreteComponent）： 实现&#x2F;继承Component的一个具体对象，也即被装饰对象</li><li>抽象装饰器（Decorator）： 通用的装饰ConcreteComponent的装饰器，其内部必然有一个属性指向Component+ 抽象组件；其实现一般是一个抽象类，主要是为了让其子类按照其构造形式传入一个Component抽象组件，这是强制的通用行为（当然，如果系统中逻辑单一，并不需要实现许多装饰器，那么我们可以直接省略该类，而直接实现一个具体装饰器（ComcreteDecorator）即可</li><li>具体装饰器（ConcreteDecorator）： Decorator的具体实现类，理论上，每个ConcreteDecorator都扩展了Component对象的一种功能</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/27/13-13-31-a07539061767393a23e0d6106a63f973-20221027131331-a29373.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-keyword">abstract</span> draw(): void;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    draw() &#123;<br>        console.log(&#x27;绘制圆形&#x27;);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    draw() &#123;<br>        console.log(&#x27;绘制矩形&#x27;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorfulShape</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    public constructor(public shape: <span class="hljs-type">Shape</span>) &#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br>    <span class="hljs-keyword">abstract</span> draw(): void;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedColorfulShape</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ColorfulShape</span> </span>&#123;<br>    draw() &#123;<br>        <span class="hljs-keyword">this</span>.shape.draw();<br>        console.log(&#x27;把边框涂成红色&#x27;);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreenColorfulShape</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ColorfulShape</span> </span>&#123;<br>    draw() &#123;<br>        <span class="hljs-keyword">this</span>.shape.draw();<br>        console.log(&#x27;把边框涂成绿色&#x27;);<br>    &#125;<br>&#125;<br><br>let circle = <span class="hljs-keyword">new</span> <span class="hljs-type">Circle</span>();<br>let redColorfulShape = <span class="hljs-keyword">new</span> <span class="hljs-type">RedColorfulShape</span>(circle);<br>redColorfulShape.draw();<br><br>let rectangle = <span class="hljs-keyword">new</span> <span class="hljs-type">Rectangle</span>();<br>let greenColorfulShape = <span class="hljs-keyword">new</span> <span class="hljs-type">GreenColorfulShape</span>(rectangle);<br>greenColorfulShape.draw();<br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li>装饰器是一种特殊类型的声明，它能够被附加到类声明、方法、属性或参数上，可以修改类的行为</li><li>常见的装饰器有类装饰器、属性装饰器、方法装饰器和参数装饰器</li><li>装饰器的写法分为普通装饰器和装饰器工厂</li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul><li>类装饰器在类声明之前声明，用来监控、修改或替换类定义</li><li>参数是类的定义或者说构造函数</li><li><a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">babel-plugin-proposal-decorators</a></li></ul><p>decorator</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> &#123; &#125;<br><span class="hljs-keyword">namespace</span> decorator &#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>        <span class="hljs-attr">swings</span>: <span class="hljs-built_in">string</span>;<br>        <span class="hljs-attr">fly</span>: <span class="hljs-built_in">any</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">flyable</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br><br>        target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">swings</span> = <span class="hljs-number">2</span>;<br>        target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I can fly&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@flyable</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">animal</span>: <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animal.<span class="hljs-property">swings</span>);<br>    animal.<span class="hljs-title function_">fly</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>decorator_factory</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> decorator_factory &#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>        <span class="hljs-attr">swings</span>: <span class="hljs-built_in">string</span>;<br>        <span class="hljs-attr">fly</span>: <span class="hljs-built_in">any</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">flyable</span>(<span class="hljs-params">swings: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">flyable</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br><br>            target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">swings</span> = swings;<br>            target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I can fly&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@flyable</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">animal</span>: <span class="hljs-title class_">Animal</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animal.<span class="hljs-property">swings</span>);<br>    animal.<span class="hljs-title function_">fly</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><ul><li>属性装饰器表达式会在运行时当作函数被调用</li><li>属性分为实例属性和类属性</li><li>方法分为实例方法和类方法</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">namespace property_namespace &#123;<br>    <span class="hljs-comment">//实例属性target是类的原型对象,key是属性名称</span><br>    <span class="hljs-keyword">function</span> instance<span class="hljs-constructor">PropertyDecorator(<span class="hljs-params">target</span>: <span class="hljs-params">any</span>, <span class="hljs-params">key</span>: <span class="hljs-params">string</span>)</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//类属性target是的构造函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">class</span><span class="hljs-constructor">PropertyDecorator(<span class="hljs-params">target</span>: <span class="hljs-params">any</span>, <span class="hljs-params">key</span>: <span class="hljs-params">string</span>)</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//实例方法装饰器target是原型对象,key方法名,descriptor是方法描述符</span><br>    <span class="hljs-keyword">function</span> instance<span class="hljs-constructor">MethodDecorator(<span class="hljs-params">target</span>: <span class="hljs-params">any</span>, <span class="hljs-params">key</span>: <span class="hljs-params">string</span>, <span class="hljs-params">descriptor</span>: PropertyDescriptor)</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//类方法装饰器target是类的构造函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">class</span><span class="hljs-constructor">MethodDecorator(<span class="hljs-params">target</span>: <span class="hljs-params">any</span>, <span class="hljs-params">key</span>: <span class="hljs-params">string</span>, <span class="hljs-params">descriptor</span>: PropertyDescriptor)</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">class</span> Person &#123;<br>        @instancePropertyDecorator<br>        instanceProperty: <span class="hljs-built_in">string</span>;<br>        @classPropertyDecorator<br>        public static classProperty: <span class="hljs-built_in">string</span>;<br>        @instanceMethodDecorator<br>        instance<span class="hljs-constructor">Method()</span> &#123;<br>            console.log(&#x27;instanceMethod&#x27;);<br>        &#125;<br>        @classMethodDecorator<br>        <span class="hljs-keyword">class</span><span class="hljs-constructor">Method()</span> &#123;<br>            console.log(&#x27;classMethod&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="core-decorator"><a href="#core-decorator" class="headerlink" title="core-decorator"></a>core-decorator</h4><p><a href="https://github.com/jayphelps/core-decorators">core-decorator</a><br><a href="https://github.com/jayphelps/core-decorators#deprecate-alias-deprecated">deprecate-alias-deprecated</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-keyword">readonly</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;core-decorators&#x27;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deprecate</span>(<span class="hljs-params">msg: <span class="hljs-built_in">string</span>, options: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target: <span class="hljs-built_in">any</span>, attr: <span class="hljs-built_in">any</span>, descriptor: <span class="hljs-built_in">any</span></span>) &#123;<br>        <span class="hljs-comment">//DEPRECATION Calculator#add: This function will be removed in future versions.</span><br>        <span class="hljs-keyword">let</span> oldVal = descriptor.<span class="hljs-property">value</span>;<br>        descriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>) &#123;<br>            <span class="hljs-keyword">let</span> message = msg ? msg : <span class="hljs-string">`DEPRECATION <span class="hljs-subst">$&#123;target.constructor.name&#125;</span>#<span class="hljs-subst">$&#123;attr&#125;</span>: This function will be removed in future versions.`</span>;<br>            <span class="hljs-keyword">let</span> see = options &amp;&amp; options.<span class="hljs-property">url</span> ? <span class="hljs-string">`see <span class="hljs-subst">$&#123;options.url&#125;</span>`</span> : <span class="hljs-string">``</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(message + <span class="hljs-string">&#x27;\r\n&#x27;</span> + see);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">oldVal</span>(...args);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-meta">@deprecate</span>(<span class="hljs-string">&#x27;stop using this&#x27;</span>, &#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span> &#125;)<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> calculator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>();<br>calculator.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><ul><li>在软件业，AOP为Aspect Oriented Programming的缩写,意为面向切面编程</li><li>可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术</li></ul><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/27/13-33-47-85a0b8dd02520d2ad34bbe6de00e1e57-20221027133346-1e0e99.png"></p><h3 id="埋点"><a href="#埋点" class="headerlink" title="埋点"></a>埋点</h3><ul><li>埋点分析: 是网站分析的一种常用的数据采集方法</li><li>无痕埋点: 通过技术手段，完成对用户行为数据无差别的统计上传的工作,后期数据分析处理的时候通过技术手段筛选出合适的数据进行统计分析</li></ul><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><ol><li>创建项目</li></ol><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">tract-demo</span><br><span class="hljs-string">yarn</span> <span class="hljs-string">add</span> <span class="hljs-string">customize-cra</span> <span class="hljs-string">react-app-rewired</span> <span class="hljs-built_in">--dev</span><br></code></pre></td></tr></table></figure><ol start="2"><li>config-overrides.js</li></ol><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">const</span> &#123;<br> <span class="hljs-keyword">override</span>,<br> addDecoratorsLegacy,<br>&#125; = require(<span class="hljs-string">&quot;customize-cra&quot;</span>);<br><span class="hljs-keyword">module</span>.exports = <span class="hljs-keyword">override</span>(<br> addDecoratorsLegacy(),<br>);<br></code></pre></td></tr></table></figure><ol start="3"><li>jsconfig.json</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;experimentalDecorators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="ndex-js"><a href="#ndex-js" class="headerlink" title="ndex.js"></a>ndex.js</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; render &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; before, after &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./track&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-meta">@before</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击方法执行前&#x27;</span>))<br>    <span class="hljs-title function_">onClickBeforeButton</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeClick&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@after</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击方法执行后&#x27;</span>))<br>    <span class="hljs-title function_">onClickAfterButton</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterClick&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@after</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/report&#x27;</span>))<br>    <span class="hljs-title function_">onClickAjaxButton</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ajaxClick&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onClickBeforeButton&#125;</span>&gt;</span>beforeClick<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onClickAfterButton&#125;</span>&gt;</span>afterClick<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onClickAjaxButton&#125;</span>&gt;</span>ajaxClick<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="track-js"><a href="#track-js" class="headerlink" title="track.js"></a>track.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> before = <span class="hljs-keyword">function</span> (<span class="hljs-params">beforeFn</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, methodName, descriptor</span>) &#123;<br>        <span class="hljs-keyword">let</span> oldMethod = descriptor.<span class="hljs-property">value</span>;<br>        descriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            beforeFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            <span class="hljs-keyword">return</span> oldMethod.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> after = <span class="hljs-keyword">function</span> (<span class="hljs-params">afterFn</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">target, methodName, descriptor</span>) &#123;<br>        <span class="hljs-keyword">let</span> oldMethod = descriptor.<span class="hljs-property">value</span>;<br>        descriptor.<span class="hljs-property">value</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            oldMethod.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            afterFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit-btn&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">beforeFn</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> ret = beforeFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ret)</span><br><span class="language-javascript">                    _this.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">submit</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提交表单&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        submit = submit.<span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (username.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;用户名不能少于6位&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        submit = submit.<span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!username) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;submit-btn&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, submit);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="装饰器模式优缺点"><a href="#装饰器模式优缺点" class="headerlink" title="装饰器模式优缺点"></a>装饰器模式优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>装饰器是继承的有力补充，比继承灵活，不改变原有对象的情况下动态地给一个对象扩展功能，即插即用</li><li>通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果</li><li>装饰器完全遵守开闭原则</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>+从代码层面来看，使用装饰器模式会出现更多的代码，更多的类，增加程序复杂性</p><ul><li>动态装饰时，多层装饰时会更复杂</li></ul>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="/blog/2022/10/02/design-pattern-state/"/>
    <url>/blog/2022/10/02/design-pattern-state/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>状态模式 （State Pattern）允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类，类的行为随着它的状态改变而改变。</p><ul><li>对象有自己的状态</li><li>不同状态下执行的逻辑不一样</li><li>用来减少if…else子句</li></ul><h2 id="生活中的例子"><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h2><p>1）等红绿灯的时候，红绿灯的状态和行人汽车的通行逻辑是有关联的：</p><ul><li>红灯亮：行人通行，车辆等待；</li><li>绿灯亮：行人等待，车辆通行；</li><li>黄灯亮：行人等待，车辆等待；</li></ul><p>2）下载文件的时候，就有好几个状态；比如下载验证、下载中、暂停下载、下载完毕、失败，文件在不同状态下表现的行为也不一样，比如</p><ul><li>下载中时显示可以暂停下载和下载进度，</li><li>下载失败时弹框提示并询问是否重新下载等等。</li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>在这些场景中，有以下特点：</p><ul><li>对象有有限多个状态，且状态间可以相互切换；</li><li>各个状态和对象的行为逻辑有比较强的对应关系，即在不同状态时，对应的处理逻辑不一样；</li></ul><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/02/09-22-35-7f770bd51b24602ef1edc008777f615d-1358693242_5100-6e40df.jpeg"></p><p>在状态模式结构图中包含如下几个角色：</p><ul><li><p>Context（环境类）：环境类又称为上下文类，它是拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所不同，因此将状态独立出去形成单独的状态类。在环境类中维护一个抽象状态类 State 的实例，这个实例定义当前状态，在具体实现时，它是一个 State 子类的对象。</p></li><li><p>State（抽象状态类）：它用于定义一个接口以封装与环境类的一个特定状态相关的行为，在抽象状态类中声明了各种不同状态对应的方法，而在其子类中实现类这些方法，由于不同状态下对象的行为可能不同，因此在不同子类中方法的实现可能存在不同，相同的方法可以写在抽象状态类中。</p></li><li><p>ConcreteState（具体状态类）：它是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/10/02/09-29-38-db32dc098e87db4649fa6427f54b559a-8aea4fca-62b1-4c5b-b41d-cad2211a2cbe-6d0823.png"></p><h3 id="大多人的写法"><a href="#大多人的写法" class="headerlink" title="大多人的写法"></a>大多人的写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span>=<span class="hljs-string">&#x27;high&#x27;</span>;<br>    &#125;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> == <span class="hljs-string">&#x27;high&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;绿色&#x27;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span>=<span class="hljs-string">&#x27;middle&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> == <span class="hljs-string">&#x27;middle&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;黄色&#x27;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span>=<span class="hljs-string">&#x27;low&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;红色&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> battery=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Battery</span>();<br>battery.<span class="hljs-title function_">show</span>();<br>battery.<span class="hljs-title function_">show</span>();<br>battery.<span class="hljs-title function_">show</span>();<br></code></pre></td></tr></table></figure><p>存在的问题</p><ul><li>show违反开放-封闭原则</li><li>show方法(胖函数)逻辑太多太复杂</li><li>颜色状态切换不明显</li><li>过多的 if&#x2F;else 让代码不可维护</li></ul><h3 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuccessState</span>&#123;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;绿色&#x27;</span>);&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningState</span>&#123;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;黄色&#x27;</span>);&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorState</span>&#123;;<span class="hljs-string">&#x27;l  show()&#123;console.log(&#x27;</span>红色<span class="hljs-string">&#x27;);&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">class WorstErrorState&#123;</span><br><span class="hljs-string">    show()&#123;console.log(&#x27;</span>深红色<span class="hljs-string">&#x27;);&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">class Battery&#123;</span><br><span class="hljs-string">    constructor()&#123;</span><br><span class="hljs-string">        this.amount = &#x27;</span>high<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">        this.state = new SuccessState();//绿色状态，满电的状态</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    show()&#123;</span><br><span class="hljs-string">        this.state.show();//把显示的逻辑委托给了状态对象</span><br><span class="hljs-string">        //内部还要维护状态的变化 </span><br><span class="hljs-string">        if(this.amount == &#x27;</span>high<span class="hljs-string">&#x27;)&#123;</span><br><span class="hljs-string">            this.amount = &#x27;</span>middle<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">            this.state = new WarningState();</span><br><span class="hljs-string">        &#125;else if(this.amount == &#x27;</span>middle<span class="hljs-string">&#x27;)&#123;</span><br><span class="hljs-string">            this.amount = &#x27;</span>low<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">            this.state = new ErrorState();</span><br><span class="hljs-string">        &#125;else if(this.amount == &#x27;</span>low<span class="hljs-string">&#x27;)&#123;</span><br><span class="hljs-string">            this.amount = &#x27;</span>superlow<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">            this.state = new WorstErrorState();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">let battery = new Battery();</span><br><span class="hljs-string">battery.show();</span><br><span class="hljs-string">battery.show();</span><br><span class="hljs-string">battery.show();</span><br><span class="hljs-string">battery.show();</span><br></code></pre></td></tr></table></figure><h3 id="优化二"><a href="#优化二" class="headerlink" title="优化二"></a>优化二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuccessState</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">private battery: Battery</span>) &#123; &#125;<br>  <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;绿色&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>.<span class="hljs-property">amount</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WarningState</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>))<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningState</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">private battery: Battery</span>) &#123; &#125;<br>  <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;黄色&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>.<span class="hljs-property">amount</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorState</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>))<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorState</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">private battery: Battery</span>) &#123; &#125;<br>  <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">battery</span>.<span class="hljs-property">amount</span>)<br>    <span class="hljs-comment">// this.battery.setState(new WorstErrorState(this.battery))</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// class WorstErrorState &#123;</span><br><span class="hljs-comment">//   constructor(private battery: Battery) &#123; &#125;</span><br><span class="hljs-comment">//   show() &#123;</span><br><span class="hljs-comment">//     console.log(&quot;深红色&quot;, this.battery.amount)</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span> &#123;<br>  amount<br>  private state<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> = <span class="hljs-string">&quot;high&quot;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuccessState</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">//绿色状态，满电的状态</span><br>  &#125;<br>  <span class="hljs-title function_">setState</span>(<span class="hljs-params">newState: any</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = newState<br>  &#125;<br>  <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-title function_">show</span>() <span class="hljs-comment">//把显示的逻辑委托给了状态对象</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> battery = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Battery</span>()<br><br>battery.<span class="hljs-title function_">show</span>()<br>battery.<span class="hljs-title function_">show</span>()<br>battery.<span class="hljs-title function_">show</span>()<br>battery.<span class="hljs-title function_">show</span>()<br><br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态，那么可以使用状态模式来将分支的处理分散到单独的状态类中；</li><li>对象的行为随着状态的改变而改变，那么可以考虑状态模式，来把状态和行为分离，虽然分离了，但是状态和行为是对应的，再通过改变状态调用状态对应的行为；</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;initial&quot;</span> <span class="hljs-comment">//先维护一下初始状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">successes</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span> = []<br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;fulfilled&quot;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">successes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title function_">item</span>(data))<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">error</span>) =&gt; &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;failed&quot;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title function_">item</span>(error))<br>    &#125;<br>    <span class="hljs-title function_">fn</span>(resolve, reject)<br>  &#125;<br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">success, error</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">successes</span>.<span class="hljs-title function_">push</span>(success)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">errors</span>.<span class="hljs-title function_">push</span>(error)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<br>    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0.5</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(num)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">reject</span>(num)<br>    &#125;<br>  &#125;, <span class="hljs-number">500</span>)<br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功&quot;</span>, data)<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败&quot;</span>, error)<br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><h3 id="React导航"><a href="#React导航" class="headerlink" title="React导航"></a>React导航</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Banner</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [state, setState] = useState&lt;<span class="hljs-string">&#x27;show&#x27;</span> | <span class="hljs-string">&#x27;hide&#x27;</span>&gt;(<span class="hljs-string">&#x27;show&#x27;</span>);<br>  <span class="hljs-comment">// map映射</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">States</span> = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;banner显示，点击可以关闭&#x27;</span>);<br>      <span class="hljs-comment">//....</span><br>      <span class="hljs-title function_">setState</span>(<span class="hljs-string">&#x27;hide&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">hide</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;banner隐藏，点击可以打开&#x27;</span>);<br>      <span class="hljs-comment">//.....</span><br>      <span class="hljs-title function_">setState</span>(<span class="hljs-string">&#x27;show&#x27;</span>);<br>    &#125;,-<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">toggle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title class_">States</span>[state]();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;state === &#x27;show&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggle&#125;</span>&gt;</span>&#123;state === &#x27;show&#x27; ? &#x27;隐藏&#x27; : &#x27;展示&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Banner</span>;<br></code></pre></td></tr></table></figure><h3 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h3><ul><li>事物拥有多种状态，任一时间只会处于一种状态不会处于多种状态；</li><li>动作可以改变事物状态，一个动作可以通过条件判断，改变事物到不同的状态，但是不能同时指向多个状态，一个时间，就一个状态</li><li>状态总数是有限的；</li><li>javascript-state-machine<ul><li>form：当前行为从哪个状态来</li><li>to:当前行为执行完会过渡到哪个状态</li><li>name:当前行为的名字</li></ul></li><li>fsm.can(t) - return true 如果过渡方法t可以从当前状态触发</li><li>fsm.cannot(t) - return true 如果当前状态下不能发生过渡方法t</li><li>fsm.transitions() - 返回从当前状态可以过渡到的状态的列表</li><li>fsm.allTransitions() - 返回所有过渡方法的列表</li><li>fsm.allStates() - 返回状态机有的所有状态的列表</li><li>onBefore 在特定动作TRANSITION前触发</li><li>onLeaveState 离开任何一个状态的时候触发</li><li>onEnter 进入一个特定的状态STATE时触发</li><li>onLeave 在离开特定状态STATE时触发</li><li>onTransition 在任何动作发生期间触发</li><li>onEnterState 当进入任何状态时触发</li><li>on onEnter的简写</li><li>onAfterTransition 任何动作触发后触发</li><li>onAfter 在特定动作TRANSITION后触发</li><li>on onAfter的简写</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pf">// let StateMachine = require(<span class="hljs-string">&quot;javascript-state-machine&quot;</span>)<br>class StateMachine &#123;<br>  constructor(options) &#123;<br>    //init定义初状态 transitions定义转换规则 methods定义监听 函数<br>    let &#123; init = <span class="hljs-string">&quot;&quot;</span>, transitions = [], methods = &#123;&#125; &#125; = options<br>    this.<span class="hljs-keyword">state</span> = init<br>    transitions.<span class="hljs-keyword">for</span>Each((transition) =&gt; &#123;<br>      let &#123; <span class="hljs-keyword">from</span>, <span class="hljs-keyword">to</span>, name &#125; = transition<br>      this[name] = function () &#123;<br>        if (this.<span class="hljs-keyword">state</span> == <span class="hljs-keyword">from</span>) &#123;<br>          this.<span class="hljs-keyword">state</span> = <span class="hljs-keyword">to</span><br>          let <span class="hljs-keyword">on</span>Method = <span class="hljs-string">&quot;on&quot;</span> + name.slice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).<span class="hljs-keyword">to</span>UpperCase() + name.slice(<span class="hljs-number">1</span>) //<span class="hljs-keyword">on</span>Melt<br>          methods[<span class="hljs-keyword">on</span>Method] &amp;&amp; methods[<span class="hljs-keyword">on</span>Method]()<br>        &#125;<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br>var fsm = new StateMachine(&#123;<br>  init: <span class="hljs-string">&quot;solid&quot;</span>,<br>  transitions: [<br>    &#123; name: <span class="hljs-string">&quot;melt&quot;</span>, <span class="hljs-keyword">from</span>: <span class="hljs-string">&quot;solid&quot;</span>, <span class="hljs-keyword">to</span>: <span class="hljs-string">&quot;liquid&quot;</span> &#125;,<br>    &#123; name: <span class="hljs-string">&quot;freeze&quot;</span>, <span class="hljs-keyword">from</span>: <span class="hljs-string">&quot;liquid&quot;</span>, <span class="hljs-keyword">to</span>: <span class="hljs-string">&quot;solid&quot;</span> &#125;,<br>    &#123; name: <span class="hljs-string">&quot;vaporize&quot;</span>, <span class="hljs-keyword">from</span>: <span class="hljs-string">&quot;liquid&quot;</span>, <span class="hljs-keyword">to</span>: <span class="hljs-string">&quot;gas&quot;</span> &#125;,<br>    &#123; name: <span class="hljs-string">&quot;condense&quot;</span>, <span class="hljs-keyword">from</span>: <span class="hljs-string">&quot;gas&quot;</span>, <span class="hljs-keyword">to</span>: <span class="hljs-string">&quot;liquid&quot;</span> &#125;,<br>  ],<br>  methods: &#123;<br>    <span class="hljs-keyword">on</span>Melt: function () &#123;<br>      console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;I melted&quot;</span>)<br>    &#125;,<br>    <span class="hljs-keyword">on</span>Freeze: function () &#123;<br>      console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;I froze&quot;</span>)<br>    &#125;,<br>    <span class="hljs-keyword">on</span>Vaporize: function () &#123;<br>      console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;I vaporized&quot;</span>)<br>    &#125;,<br>    <span class="hljs-keyword">on</span>Condense: function () &#123;<br>      console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;I condensed&quot;</span>)<br>    &#125;,<br>  &#125;,<br>&#125;)<br>fsm.melt()<br>fsm.freeze()<br><br></code></pre></td></tr></table></figure><h2 id="状态模式的优缺点"><a href="#状态模式的优缺点" class="headerlink" title="状态模式的优缺点"></a>状态模式的优缺点</h2><h3 id="状态模式的优点："><a href="#状态模式的优点：" class="headerlink" title="状态模式的优点："></a>状态模式的优点：</h3><ul><li>结构相比之下清晰，避免了过多的 switch-case 或 if-else 语句的使用，避免了程序的复杂性提高系统的可维护性;</li><li>符合开闭原则，每个状态都是一个子类，增加状态只需增加新的状态类即可，修改状态也只需修改对应状态类就可以了；</li><li>封装性良好，状态的切换在类的内部实现，外部的调用无需知道类内部如何实现状态和行为的变换。</li></ul><h3 id="状态模式的缺点："><a href="#状态模式的缺点：" class="headerlink" title="状态模式的缺点："></a>状态模式的缺点：</h3><ul><li>引入了多余的类，每个状态都有对应的类，导致系统中类的个数增加。</li></ul>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计原则之开闭原则</title>
    <link href="/blog/2022/10/01/design-rule-ocp/"/>
    <url>/blog/2022/10/01/design-rule-ocp/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是开闭原则（OCP）"><a href="#什么是开闭原则（OCP）" class="headerlink" title="什么是开闭原则（OCP）"></a>什么是开闭原则（OCP）</h2><p>开闭原则的英文全称是 <code>Open Closed Principle</code>，简写为 <code>OCP</code>。</p><p>它的英文描述是：software entities (modules, classes, functions, etc.) should be open for extension , but closed for modification。</p><p>我们把它翻译成中文就是：软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”。</p><p>这个描述比较简略，如果我们详细表述一下，那就是，添加一个新的功能应该是，在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）。</p><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><p>开闭原则是<code>SOLID</code> 中最难理解、最难掌握，同时也是最有用的一条原则。</p><h3 id="难理解"><a href="#难理解" class="headerlink" title="难理解"></a>难理解</h3><ul><li>怎样的代码改动才被定义为’扩展’？</li><li>怎样的代码改动才被定义为’修改’？</li><li>怎么才算满足或违反’开闭原则’？</li><li>修改代码就一定意味着违反’开闭原则’吗？</li></ul><h3 id="难掌握"><a href="#难掌握" class="headerlink" title="难掌握"></a>难掌握</h3><ul><li>如何做到‘对扩展开放、修改关闭’？</li><li>如何在项目中灵活地应用‘开闭原则’，以避免在追求扩展性的同时影响到代码的可读性？”</li></ul><h3 id="最重要"><a href="#最重要" class="headerlink" title="最重要"></a>最重要</h3><p>扩展性是代码质量最重要的衡量标准之一。</p><p>在 23 种经典设计模式中，大部分设计模式都是为了解决代码的扩展性问题而存在的，主要遵从的设计原则就是开闭原则。</p><h2 id="如何理解“对扩展开放、修改关闭”？"><a href="#如何理解“对扩展开放、修改关闭”？" class="headerlink" title="如何理解“对扩展开放、修改关闭”？"></a>如何理解“对扩展开放、修改关闭”？</h2><p>下面是一个 <code>API </code>接口监控告警的例子。</p><ul><li><code>AlertRule</code> 存储告警规则，可以自由设置。</li><li><code>Notification</code> 是告警通知类，支持邮件、短信、微信、手机等多种通知渠道。</li><li><code>NotificationEmergencyLevel</code> 表示通知的紧急程度，包括 <code>SEVERE</code>（严重）、<code>URGENCY</code>（紧急）、<code>NORMAL</code>（普通）、<code>TRIVIAL</code>（无关紧要），不同的紧急程度对应不同的发送渠道。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alert</span> &#123;<br>    <span class="hljs-keyword">private</span> AlertRule rule;<br>    <span class="hljs-keyword">private</span> Notification notification;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Alert</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rule = rule;<br>        <span class="hljs-keyword">this</span>.notification = notification;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">String</span> api, <span class="hljs-type">long</span> requestCount, <span class="hljs-type">long</span> errorCount, <span class="hljs-type">long</span> durationOfSeconds)</span> </span>&#123;<br>        <span class="hljs-type">long</span> tps = requestCount / durationOfSeconds;<br>        <span class="hljs-keyword">if</span> (tps &gt; rule.<span class="hljs-built_in">getMatchedRule</span>(api).<span class="hljs-built_in">getMaxTps</span>()) &#123;<br>            notification.<span class="hljs-built_in">notify</span>(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (errorCount &gt; rule.<span class="hljs-built_in">getMatchedRule</span>(api).<span class="hljs-built_in">getMaxErrorCount</span>()) &#123;<br>            notification.<span class="hljs-built_in">notify</span>(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务逻辑主要集中在 <code>check() </code>函数中。当接口的 <code>TPS</code> 超过某个预先设置的最大值时，以及当接口请求出错数大于某个最大允许值时，就会触发告警，通知接口的相关负责人或者团队。</p><p>现在，如果我们需要添加一个功能，当每秒钟接口超时请求个数，超过某个预先设置的最大阈值时，我们也要触发告警发送通知。</p><p>这个时候，我们该如何改动代码呢？</p><p>主要的改动有两处：</p><ul><li>第一处是修改 check() 函数的入参，添加一个新的统计数据 timeoutCount，表示超时接口请求数；</li><li>第二处是在 check() 函数中添加新的告警逻辑。具体的代码改动如下所示：</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alert</span> &#123;<br>    <span class="hljs-comment">// ...省略AlertRule/Notification属性和构造函数...</span><br><br>    <span class="hljs-comment">// 改动一：添加参数timeoutCount</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">String</span> api, <span class="hljs-type">long</span> requestCount, <span class="hljs-type">long</span> errorCount, <span class="hljs-type">long</span> timeoutCount, <span class="hljs-type">long</span> durationOfSeconds)</span> </span>&#123;<br>        <span class="hljs-type">long</span> tps = requestCount / durationOfSeconds;<br>        <span class="hljs-keyword">if</span> (tps &gt; rule.<span class="hljs-built_in">getMatchedRule</span>(api).<span class="hljs-built_in">getMaxTps</span>()) &#123;<br>            notification.<span class="hljs-built_in">notify</span>(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (errorCount &gt; rule.<span class="hljs-built_in">getMatchedRule</span>(api).<span class="hljs-built_in">getMaxErrorCount</span>()) &#123;<br>            notification.<span class="hljs-built_in">notify</span>(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 改动二：添加接口超时处理逻辑</span><br>        <span class="hljs-type">long</span> timeoutTps = timeoutCount / durationOfSeconds;<br>        <span class="hljs-keyword">if</span> (timeoutTps &gt; rule.<span class="hljs-built_in">getMatchedRule</span>(api).<span class="hljs-built_in">getMaxTimeoutTps</span>()) &#123;<br>            notification.<span class="hljs-built_in">notify</span>(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的代码修改实际上存在挺多问题的。</p><ul><li><p>一方面，我们对接口进行了修改，这就意味着调用这个接口的代码都要做相应的修改。另一方面，修改了 <code>check() </code>函数，相应的单元测试都需要修改</p></li><li><p>上面的代码改动是基于“修改”的方式来实现新功能的。如果我们遵循开闭原则，也就是“对扩展开放、对修改关闭”。那如何通过“扩展”的方式，来实现同样的功能呢？</p></li><li><p>我们先重构一下之前的 <code>Alert</code> 代码，让它的扩展性更好一些。重构的内容主要包含两部分：第一部分是将<code> check()</code> 函数的多个入参封装成 <code>ApiStatInfo </code>类；第二部分是引入 handler 的概念，将<code> if</code> 判断逻辑分散在各个 <code>handler</code> 中。具体的代码实现如下所示：</p></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;AlertHandler&gt; alertHandlers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAlertHandler</span><span class="hljs-params">(AlertHandler alertHandler)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.alertHandlers.add(alertHandler);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (AlertHandler <span class="hljs-keyword">handler</span> : alertHandlers) &#123;<br>            <span class="hljs-keyword">handler</span>.check(apiStatInfo);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiStatInfo</span> </span>&#123;<span class="hljs-comment">//省略constructor/getter/setter方法</span><br>    <span class="hljs-keyword">private</span> String api;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> requestCount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> errorCount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> durationOfSeconds;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> AlertRule rule;<br>    <span class="hljs-keyword">protected</span> Notification notification;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rule = rule;<br>        <span class="hljs-keyword">this</span>.notification = notification;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TpsAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TpsAlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(rule, notification);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> tps = apiStatInfo.getRequestCount()/ apiStatInfo.getDurationOfSeconds();<br>        <span class="hljs-keyword">if</span> (tps &gt; rule.getMatchedRule(apiStatInfo.getApi()).getMaxTps()) &#123;<br>            notification.notify(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ErrorAlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(rule, notification);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (apiStatInfo.getErrorCount() &gt; rule.getMatchedRule(apiStatInfo.getApi()).getMaxErrorCount()) &#123;<br>            notification.notify(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码是对<code>Alert</code>的重构，我们再来看下，重构之后的<code>Alert</code>该如何使用呢？具体的使用代码我也写在这里了。</p><p>其中，<code>ApplicationContext</code> 是一个单例类，负责 <code>Alert</code> 的创建、组装（<code>alertRule</code> 和 <code>notification</code> 的依赖注入）、初始化（添加 <code>handlers</code>）工作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContext</span> &#123;<br>    <span class="hljs-keyword">private</span> AlertRule alertRule;<br>    <span class="hljs-keyword">private</span> Notification notification;<br>    <span class="hljs-keyword">private</span> Alert alert;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializeBeans</span>()</span> &#123;<br>        alertRule = <span class="hljs-keyword">new</span> AlertRule(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>        notification = <span class="hljs-keyword">new</span> Notification(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>        alert = <span class="hljs-keyword">new</span> Alert();<br>        alert.addAlertHandler(<span class="hljs-keyword">new</span> TpsAlertHandler(alertRule, notification));<br>        alert.addAlertHandler(<span class="hljs-keyword">new</span> ErrorAlertHandler(alertRule, notification));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Alert <span class="hljs-title">getAlert</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> alert;<br>    &#125;<br><br>    <span class="hljs-comment">// 饿汉式单例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final ApplicationContext instance = <span class="hljs-keyword">new</span> ApplicationContext();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ApplicationContext</span>()</span> &#123;<br>        initializeBeans();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getInstance</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        ApiStatInfo apiStatInfo = <span class="hljs-keyword">new</span> ApiStatInfo();<br>        <span class="hljs-comment">// ...省略设置apiStatInfo数据值的代码</span><br>        ApplicationContext.getInstance().getAlert().check(apiStatInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们再来看下，基于重构之后的代码，如果再添加上面讲到的那个新功能，每秒钟接口超时请求个数超过某个最大阈值就告警，我们又该如何改动代码呢？主要的改动有下面四处。</p><ul><li>第一处改动是：在 <code>ApiStatInfo</code> 类中添加新的属性<code> timeoutCount</code>。</li><li>第二处改动是：添加新的 <code>TimeoutAlertHander </code>类。</li><li>第三处改动是：在 <code>ApplicationContext</code> 类的<code> initializeBeans()</code> 方法中，往<code>alert</code>对象中注册新的 <code>timeoutAlertHandler</code>。</li><li>第四处改动是：在使用 <code>Alert</code> 类的时候，需要给 <code>check() </code>函数的入参 <code>apiStatInfo </code>对象设置 <code>timeoutCount</code> 的值。</li></ul><p>改动之后的代码如下所示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123; <span class="hljs-comment">// 代码未改动... &#125;</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiStatInfo</span> </span>&#123;<span class="hljs-comment">//省略constructor/getter/setter方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> api;<br>    <span class="hljs-keyword">private</span> long requestCount;<br>    <span class="hljs-keyword">private</span> long errorCount;<br>    <span class="hljs-keyword">private</span> long durationOfSeconds;<br>    <span class="hljs-keyword">private</span> long timeoutCount; <span class="hljs-comment">// 改动一：添加新字段</span><br>&#125;<br>public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertHandler</span> </span>&#123; <span class="hljs-comment">//代码未改动... &#125;</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TpsAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//代码未改动...&#125;</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//代码未改动...&#125;</span><br><span class="hljs-comment">// 改动二：添加新的handler</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeoutAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//省略代码...&#125;</span><br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContext</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AlertRule</span> alertRule;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Notification</span> notification;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Alert</span> alert;<br><br>    public void initializeBeans() &#123;<br>        alertRule = <span class="hljs-keyword">new</span> <span class="hljs-type">AlertRule</span>(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>        notification = <span class="hljs-keyword">new</span> <span class="hljs-type">Notification</span>(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>        alert = <span class="hljs-keyword">new</span> <span class="hljs-type">Alert</span>();<br>        alert.addAlertHandler(<span class="hljs-keyword">new</span> <span class="hljs-type">TpsAlertHandler</span>(alertRule, notification));<br>        alert.addAlertHandler(<span class="hljs-keyword">new</span> <span class="hljs-type">ErrorAlertHandler</span>(alertRule, notification));<br>        <span class="hljs-comment">// 改动三：注册handler</span><br>        alert.addAlertHandler(<span class="hljs-keyword">new</span> <span class="hljs-type">TimeoutAlertHandler</span>(alertRule, notification));<br>    &#125;<br>   <span class="hljs-comment">//...省略其他未改动代码...</span><br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    public static void main(<span class="hljs-type">String</span>[] args) &#123;<br>        <span class="hljs-type">ApiStatInfo</span> apiStatInfo = <span class="hljs-keyword">new</span> <span class="hljs-type">ApiStatInfo</span>();<br>        <span class="hljs-comment">// ...省略apiStatInfo的set字段代码</span><br>        apiStatInfo.setTimeoutCount(<span class="hljs-number">289</span>); <span class="hljs-comment">// 改动四：设置tiemoutCount值</span><br>        <span class="hljs-type">ApplicationContext</span>.getInstance().getAlert().check(apiStatInfo);<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重构之后的代码更加灵活和易扩展。如果我们要想添加新的告警逻辑，只需要基于扩展的方式创建新的 handler 类即可，不需要改动原来的 check() 函数的逻辑。而且，我们只需要为新的 handler 类添加单元测试，老的单元测试都不会失败，也不用修改。</p><h2 id="修改代码就意味着违背开闭原则吗？"><a href="#修改代码就意味着违背开闭原则吗？" class="headerlink" title="修改代码就意味着违背开闭原则吗？"></a>修改代码就意味着违背开闭原则吗？</h2><p>看了上面重构之后的代码，你可能还会有疑问：在添加新的告警逻辑的时候，尽管改动二（添加新的 handler 类）是基于扩展而非修改的方式来完成的，但改动一、三、四貌似不是基于扩展而是基于修改的方式来完成的，那改动一、三、四不就违背了开闭原则吗？</p><p>我们先来分析一下改动一：往 ApiStatInfo 类中添加新的属性 timeoutCount。</p><p>实际上，我们不仅往 ApiStatInfo 类中添加了属性，还添加了对应的 getter&#x2F;setter 方法。那这个问题就转化为：给类中添加新的属性和方法，算作“修改”还是“扩展”？</p><p>我们再一块回忆一下开闭原则的定义：软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”。</p><p>从定义中，我们可以看出，开闭原则可以应用在不同粒度的代码中，可以是模块，也可以类，还可以是方法（及其属性）。</p><p>同样一个代码改动，在粗代码粒度下，被认定为“修改”，在细代码粒度下，又可以被认定为“扩展”。</p><p>比如，改动一，添加属性和方法相当于修改类，在类这个层面，这个代码改动可以被认定为“修改”；但这个代码改动并没有修改已有的属性和方法，在方法（及其属性）这一层面，它又可以被认定为“扩展”。</p><p>实际上，我们也没必要纠结某个代码改动是“修改”还是“扩展”，更没必要太纠结它是否违反“开闭原则”。</p><p>&#x2F;<strong>我们回到这条原则的设计初衷：只要它没有破坏原有的代码的正常运行，没有破坏原有的单元测试，我们就可以说，这是一个合格的代码改动。</strong>&#x2F;</p><p>我们再来分析一下改动三和改动四：</p><p>在 <code>ApplicationContext</code> 类的 <code>initializeBeans()</code> 方法中，往 alert 对象中注册新的 <code>timeoutAlertHandler</code>；在使用 <code>Alert </code>类的时候，需要给 <code>check() </code>函数的入参 <code>apiStatInfo</code> 对象设置 <code>timeoutCount </code>的值。</p><ul><li><p>这两处改动都是在方法内部进行的，不管从哪个层面（模块、类、方法）来讲，都不能算是“扩展”，而是地地道道的“修改”。不过，有些修改是在所难免的，是可以被接受的。为什么这么说呢？我来解释一下。</p></li><li><p>在重构之后的<code> Alert</code> 代码中，我们的核心逻辑集中在 <code>Alert</code> 类及其各个 <code>handler</code> 中，当我们在添加新的告警逻辑的时候，<code>Alert</code> 类完全不需要修改，而只需要扩展一个新 <code>handler </code>类。如果我们把<code>Alert</code>类及各个 <code>handler</code> 类合起来看作一个“模块”，那模块本身在添加新的功能的时候，完全满足开闭原则。</p></li><li><p>而且，我们要认识到，添加一个新功能，不可能任何模块、类、方法的代码都不“修改”，这个是做不到的。类需要创建、组装、并且做一些初始化操作，才能构建成可运行的的程序，这部分代码的修改是在所难免的。我们要做的是尽量让修改操作更集中、更少、更上层，尽量让最核心、最复杂的那部分逻辑代码满足开闭原则。</p></li></ul><h2 id="如何做到“对扩展开放、修改关闭”？"><a href="#如何做到“对扩展开放、修改关闭”？" class="headerlink" title="如何做到“对扩展开放、修改关闭”？"></a>如何做到“对扩展开放、修改关闭”？</h2><p>在写代码的时候后，我们要多花点时间往前多思考一下，这段代码未来可能有哪些需求变更、如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，不需要改动代码整体结构、做到最小代码改动的情况下，新的代码能够很灵活地插入到扩展点上，做到“对扩展开放、对修改关闭”。</p><p>还有，在识别出代码可变部分和不可变部分之后，我们要将可变部分封装起来，隔离变化，提供抽象化的不可变接口，给上层系统使用。当具体的实现发生变化的时候，我们只需要基于相同的抽象接口，扩展一个新的实现，替换掉老的实现即可，上游系统的代码几乎不需要修改。</p><p>多使用多态、依赖注入、基于接口而非实现编程，以及前面提到的抽象意识，说的都是同一种设计思路，只是从不同的角度、不同的层面来阐述而已。</p><h2 id="如何在项目中灵活应用开闭原则？"><a href="#如何在项目中灵活应用开闭原则？" class="headerlink" title="如何在项目中灵活应用开闭原则？"></a>如何在项目中灵活应用开闭原则？</h2><p>对于一些比较确定的、短期内可能就会扩展，或者需求改动对代码结构影响比较大的情况，或者实现成本不高的扩展点，在编写代码的时候之后，我们就可以事先做些扩展性设计。</p><p>但对于一些不确定未来是否要支持的需求，或者实现起来比较复杂的扩展点，我们可以等到有需求驱动的时候，再通过重构代码的方式来支持扩展的需求</p><p>为了更好地支持扩展性，我们对代码进行了重构，重构之后的代码要比之前的代码复杂很多，理解起来也更加有难度。很多时候，我们都需要在扩展性和可读性之间做权衡。在某些场景下，代码的扩展性很重要，我们就可以适当地牺牲一些代码的可读性；在另一些场景下，代码的可读性更加重要，那我们就适当地牺牲一些代码的可扩展性。</p>]]></content>
    
    
    <categories>
      
      <category>design pattern</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker中ADD和COPY的区别</title>
    <link href="/blog/2022/09/10/docker-add-copy/"/>
    <url>/blog/2022/09/10/docker-add-copy/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当我们在使用<code>Dockerfile</code>创建镜像时，你可以使用两个命令来进行文件或者目录的复制：<code>ADD</code>和<code>COPY</code>。它们的用途基本上是一致的除了有一些小的不同点。</p><p>于是，为什么会有两个命令呢？我们在什么情况下使用它们呢？</p><p>在这篇文章中，会对每个命令进行解释以及分析<code>Docker</code>中<code>ADD</code>和<code>COPY</code>的对比，你将知道如何选择来使用它们。</p><h2 id="Docker-ADD-命令"><a href="#Docker-ADD-命令" class="headerlink" title="Docker ADD 命令"></a>Docker ADD 命令</h2><p><code>ADD</code> 指令在<code>Docker</code>平台出现得比较早，在早期就已经是命令集合中的一员了。<code>ADD</code>主要是复制文件和目录到特定容器下的文件系统中。</p><p><code>ADD</code>命令的基本语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ADD <span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span> … <span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>它包含你想要复制的源文件（<code>src</code>）以及你需要存储的目的地（<code>dest</code>）。如果给定的<code>src</code>是一个目录的话，<code>ADD</code>命令将会复制目录下的所有文件。</p><p>例如，如果文件存在于本地，并且你想要复制到一个目录，你可以这样：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ADD <span class="hljs-regexp">/source/</span><span class="hljs-keyword">file</span><span class="hljs-regexp">/path  /</span>destination/path<br></code></pre></td></tr></table></figure><h3 id="远程复制文件"><a href="#远程复制文件" class="headerlink" title="远程复制文件"></a>远程复制文件</h3><p><code>ADD</code>命令同时也支持从一个远程地址复制文件。它将会从远程下载文件，并且复制到容器内的文件系统，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ADD http:<span class="hljs-regexp">//</span>source.file<span class="hljs-regexp">/url  /</span>destination/path<br></code></pre></td></tr></table></figure><h3 id="本地解压文件并复制文件"><a href="#本地解压文件并复制文件" class="headerlink" title="本地解压文件并复制文件"></a>本地解压文件并复制文件</h3><p>如下，指定本地的压缩文件，以及要复制的容器目标文件系统路径即可：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ADD source<span class="hljs-selector-class">.file</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> /temp<br></code></pre></td></tr></table></figure><p>这里需要注意的是，你不能从远程地址下载和解压缩文件或者目录。</p><h2 id="Docker-COPY命令"><a href="#Docker-COPY命令" class="headerlink" title="Docker COPY命令"></a>Docker COPY命令</h2><p>基于有些功能问题，<code>Docker</code>不得不增加另外的命令来复制内容，也就是<code>COPY</code>命令。</p><p>不同于<code>ADD</code>命令，<code>COPY</code>指令仅仅只有一个功能。它的角色就是复制本地的文件或者目录到容器的文件系统。也就意味着它不会去解压缩一个压缩的文件，仅仅只是复制而已。</p><p>这个指令只能用在处理本地的文件。也就是说，你不能用它来复制远程路径的文件到容器内。</p><p>下面是使用 <code>COPY</code> 命令的基本语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">COPY <span class="hljs-tag">&lt;<span class="hljs-name">src</span>&gt;</span> … <span class="hljs-tag">&lt;<span class="hljs-name">dest</span>&gt;</span><br></code></pre></td></tr></table></figure><p>For example:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">COPY</span> <span class="hljs-regexp">/source/</span><span class="hljs-keyword">file</span><span class="hljs-regexp">/path  /</span>destination/path<br></code></pre></td></tr></table></figure><h2 id="Docker-Copy-vs-ADD"><a href="#Docker-Copy-vs-ADD" class="headerlink" title="Docker Copy vs ADD"></a>Docker Copy vs ADD</h2><p>那为什么<code>Docker</code>需要添加一个新的，并且相近的命令？</p><p>事实就是 <code>ADD</code> 命令在实践过程中有很多的功能问题出现，并且它极其的不可预测。这个不稳定的表现结果经常是出现在你复制内容的时候，到底是需要压缩的内容还是解压缩内容。</p><p><code>Docker</code>由于有很多存在的用途，并不能完全替代 <code>ADD</code> 命令。同时，为了向后兼容，最好的稳妥做法就是添加 <code>COPY</code> 命令。</p><h3 id="到底如何选择？"><a href="#到底如何选择？" class="headerlink" title="到底如何选择？"></a>到底如何选择？</h3><p>Docker的官方文件有提到，应当尽可能的使用 <code>COPY</code>，原因是相对于 <code>ADD</code>，它的使用更加透明。</p><p>如果你需要复制本地的内容到容器内，最好用 <code>COPY</code>。</p><p><code>Docker</code>团队同时也强烈建议不要使用 <code>ADD</code> 来下载和复制远程地址文件，而是使用更加安全和高效地通过 <code>RUN</code> 命令来使用 <code>wget</code> 或者 <code>curl</code> 达到同样的功能。如果这样操作的话，你将避免创建新的镜像层，以及减少镜像大小。</p><p>例如，你想要下载远程地址的一个压缩文件，解压缩内容，并在最后清除下载包。</p><p>使用 <code>ADD</code> 的方式：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ADD http:<span class="hljs-comment">//source.file/package.file.tar.gz /temp</span><br>RUN tar -xjf <span class="hljs-regexp">/temp/</span><span class="hljs-keyword">package</span>.<span class="hljs-keyword">file</span>.tar.gz \<br>  &amp;&amp; make -C <span class="hljs-regexp">/tmp/</span><span class="hljs-keyword">package</span>.<span class="hljs-keyword">file</span> \<br>  &amp;&amp; rm <span class="hljs-regexp">/tmp/</span> <span class="hljs-keyword">package</span>.<span class="hljs-keyword">file</span>.tar.gz<br></code></pre></td></tr></table></figure><p>你应该这样做：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">RUN curl http:<span class="hljs-comment">//source.file/package.file.tar.gz \</span><br>  | tar -xjC <span class="hljs-regexp">/tmp/</span> <span class="hljs-keyword">package</span>.<span class="hljs-keyword">file</span>.tar.gz \<br>  &amp;&amp; make -C <span class="hljs-regexp">/tmp/</span> <span class="hljs-keyword">package</span>.<span class="hljs-keyword">file</span>.tar.gz<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结来说，尽量使用 <code>COPY</code> 命令。就像<code>Docker</code>官方的建议一样，尽量避免使用 <code>ADD</code> 命令，除非你需要复制一个本地压缩文件并在容器内进行解压缩。</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在生产环境中使你的 npm i 速度提升 50%</title>
    <link href="/blog/2022/09/03/npm-install/"/>
    <url>/blog/2022/09/03/npm-install/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>纯前端<code>Web</code>应用或<code>Node</code> 应用，在 <code>CICD pipeline</code> 中，无论是构建、测试、部署，通常第一步就是依赖安装: <code>npm i</code>。但是通常<code>npm i</code> 是耗时最长的一个环节。</p><p>如果依赖安装时间变短，就能极大地缩短部署时间，从而提高产品交付效率。</p><p><code>CI</code> 环境中的优化通常指的是生产环境: </p><p>在本地环境中安装依赖是有状态的，如 <code>node_modules</code>，<code>~/.npmrc</code>，<code>~/.npm</code> 一系列硬盘目录及文件，无不构成状态。</p><p>而在生产环境中，往往结合 <code>CICD</code> 工具，每次分配的 <code>Runner</code> 不一定是一台服务器(容器)，往往被视为无状态，因而无法有效利用缓存而导致 <code>CI</code> 中部署用时过长。</p><p>但也正因为 <code>CICD Runner</code> 的无状态化，这意味着你只要参考构建脚本，如 .<code>gitlab-ci.yaml</code>，<code>.travis.yaml</code> 或者 <code>.github/workflows/deploy.yaml</code>，就可以从零把项目跑起来，而避免过多在熟悉新项目时求助他人。</p><p>不同的部署方式，不同的持续集成工具有不同的实践方法，但优化的原理大同小异。</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/09/03/09-38-21-131c7d3d678f5e347fe2f889b4e6418f-20220903093820-10b48a.png"></p><h2 id="只安装生产环境使用的库"><a href="#只安装生产环境使用的库" class="headerlink" title="只安装生产环境使用的库"></a>只安装生产环境使用的库</h2><p><code>npm install</code> 的速度显然与它依赖的包的多少是正相关的，那减少包的数量就可以减少装包所花费的时间。</p><p>使用 <code>--production</code> 可以只安装 <code>package.json</code> 中 <code>dependencies</code> 中的依赖项，只把要安装在 <code>CI</code> 中需要使用到的依赖。在生产环境部署时可以指定 <code>--production</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --production<br></code></pre></td></tr></table></figure><p>另外，通过设置环境变量 <code>NODE_ENV=production</code> 相当于指定 <code>--production</code>，测试如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">NODE_ENV=production npm config get production</span><br>true<br></code></pre></td></tr></table></figure><p>这需要我们根据到底是开发环境使用还是生产环境使用，从而把 <code>packages</code> 分拣到 <code>devDependencies</code> 与 <code>dependencies</code> 中。</p><h2 id="使用私有镜像仓库"><a href="#使用私有镜像仓库" class="headerlink" title="使用私有镜像仓库"></a>使用私有镜像仓库</h2><p>从 <code>npm</code> 的官方仓库可以发布与拉取 <code>package</code>，比如 <code>react</code>，<code>vue</code> 和 <code>express</code> 都发布在官方仓库中。官方 <code>registory</code> 地址是 <code>https://registry.npmjs.org/</code>，这对国内的前端应用来说，由于远在国外，远程仓库的服务器时延过大，此时的瓶颈在于网络。</p><p>国内的公有镜像库，如淘宝镜像，它每隔十分钟与官方镜像仓库同步一次，而它位于国内，网络也很快。</p><p>对于企业级项目的生产环境来说，在集群内部搭建私有仓库是一个更好的选择，也更能缩短时延。 流量能在局域网完成的，就不需要去互联网中溜圈了。</p><p>使用 <code>npm config</code> 来设置 <code>npm</code> 仓库，它将把仓库信息写入 <code>~/.npmrc </code>中，这足以适用于<code>CICD</code> 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.peffy.tech/<br></code></pre></td></tr></table></figure><h2 id="利用缓存"><a href="#利用缓存" class="headerlink" title="利用缓存"></a>利用缓存</h2><p><code>npm install</code>不能慢两次；正如 <code>http cache</code> 一样，<code>npm install</code> 也可以充分利用缓存，npm 的缓存在 <code>linux</code> 系统中存在于以下路径:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/.npm<br></code></pre></td></tr></table></figure><p>命令 <code>npm cache verify</code> 可以校验缓存，如下所示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm cache verify</span><br>Cache verified and compressed (~/.npm/_cacache):<br>Content verified: 4415 (156612117 bytes)<br>Index entries: 6239<br>Finished in 14.017s<br></code></pre></td></tr></table></figure><p>结合 <code>npm install --prefer-offline</code> 缓存优先策略充分利用缓存</p><p>但是有一个悖论，在 <code>CI</code> 中是无状态的: 你本次装的 <code>node_modules</code> 和生成的 <code>~/.npm</code> 将会在下次装包时丢失。</p><p>这时候就需要利用 <code>CI</code> 的缓存功能，如以下是 <code>travis ci</code> 的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">install:<br>- npm ci<br><span class="hljs-meta prompt_"># </span><span class="language-bash">keep the npm cache around to speed up installs</span><br>cache:<br>  directories:<br>  - &quot;$HOME/.npm&quot;<br><br></code></pre></td></tr></table></figure><h2 id="progress-屏蔽非必要打印信息"><a href="#progress-屏蔽非必要打印信息" class="headerlink" title="progress: 屏蔽非必要打印信息"></a>progress: 屏蔽非必要打印信息</h2><p>当设置 <code>progress</code> 为 <code>true</code> 时，<code>npm install</code> 时将会显示进度条，把它设置为 <code>false</code> 可小幅提高 <code>npm install</code> 的速度。</p><p>修改设置:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">set</span> <span class="hljs-attribute">progress</span>=<span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><p>在<a href="https://docs.npmjs.com/cli/v8/using-npm/config">官方文档中</a>对 progress 有以下介绍：</p><blockquote><p>Default: true, unless TRAVIS or CI env vars set. Type: Boolean</p></blockquote><p>因此，只需要在构建服务器中简单设置一个 <code>CI=true</code> 的环境变量即可以很轻便地解决问题</p><h2 id="使用-npm-ci-替代-npm-i"><a href="#使用-npm-ci-替代-npm-i" class="headerlink" title="使用 npm ci 替代 npm i"></a>使用 npm ci 替代 npm i</h2><p>单看名字，里边有个 <code>CI</code>，它就像适用在 <code>CI</code> 中，事实也如此。它在 <code>CI</code> 环境中做了一系列优化，如去除掉一些面向用户的特性来加强速度。除了性能，它也有一些在 <code>CI</code> 上基于完整性与安全性的检查，如 <code>package.json</code> 与 <code>package-lock.json</code> 版本不一致的问题。</p><p>为了更好地提高速度，<code>npm ci</code> 基于一个独立的库<a href="https://github.com/npm/libcipm">libcipm</a>安装依赖，而它拥有和 <code>npm install</code> 兼容的 <code>API</code>。并且当它安装依赖时，默认是缓存优先的，它会充分利用缓存，从而加速装包。</p><p>经实验，<code>npm ci</code> 可以减少将近一半的的依赖安装时间。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">added </span><span class="hljs-number">1154</span> packages in <span class="hljs-number">60</span>s<br><br>$ npm ci<br><span class="hljs-keyword">added </span><span class="hljs-number">1154</span> packages in <span class="hljs-number">35</span>s<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下如何减少 <code>npm install</code> 的时间，都是很简单的设置，一分钟搞定</p><ul><li>选择时延低的 registry，需要企业技术基础建设支持</li><li>NODE_ENV&#x3D;production，只安装生产环境必要的包(如果 dep 与 devDep 没有仔细分割开来，工作量很大，可以放弃)</li><li>CI&#x3D;true，npm 会在此环境变量下自动优化</li><li>结合 CI 的缓存功能，充分利用 npm cache</li><li>使用 npm ci 代替 npm i，既提升速度又保障应用安全性</li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 docker 部署前端项目</title>
    <link href="/blog/2022/08/28/docker-cicd/"/>
    <url>/blog/2022/08/28/docker-cicd/</url>
    
    <content type="html"><![CDATA[<p>Docker 变得越来越流行，它可以轻便灵活地隔离环境，进行扩容，运维管理。对于业务开发者而言，随着持续集成的发展，对代码质量及快速迭代的要求也越来越高。</p><p>对于前端而言，在 CI 环境中使用也更容易集成开发，测试与部署。比如可以为流水线(Pipeline)设置 Lint&#x2F;Test&#x2F;Security&#x2F;Audit&#x2F;Deploy&#x2F;Artifact 等任务，更好地把控项目质量。</p><p>这里将介绍如何使用 Docker 部署前端应用，千里之行，始于足下。始于足下的意思就是，先让它能够跑起来。</p><h2 id="先让它跑起来"><a href="#先让它跑起来" class="headerlink" title="先让它跑起来"></a>先让它跑起来</h2><p>首先，简单介绍一下一个典型的前端应用在生产环境中的部署流程</p><ol><li><code>npm install</code>, 安装依赖</li><li><code>npm run build</code>，编译，打包，生成静态资源</li><li>服务化静态资源，如 nginx</li></ol><p>介绍完部署流程后，简单写一个 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用 node:14-alpine 基础镜像</span><br><span class="hljs-comment"># 带有 alpine 标签的基础镜像基于最小化的操作系统 alpine，拥有更小的体积</span><br><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><br><span class="hljs-comment"># 许多 package 会根据此环境变量，做出不同的行为</span><br><span class="hljs-comment"># 另外，在 webpack 中打包也会根据此环境变量做出优化，但是 create-react-app 在打包时会写死该环境变量</span><br><span class="hljs-comment"># 注意: 该环境变量有时可能引起问题</span><br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><br><span class="hljs-comment"># http-server 用以起静态资源服务器</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build &amp;&amp; npm install -g http-server</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># create-react-app 中 build 为最后的静态资源目录</span><br><span class="hljs-comment"># 如果你不是使用 cra 构建的，此处的 ./build 需要更改为你的静态资源目录</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>现在这个前端服务已经跑起来了，接下来你可以完成部署的其它阶段了。</p><p>一般情况下，以下就成了运维的工作了，不过，拓展自己的知识边界总是没错的。其它阶段介绍如下</p><ul><li>使用 <code>nginx</code> 或者 <code>traefik</code> 做反向代理。在我内部集群中使用了 <code>traefik</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/traefik.md">traefik 简易入门</a></li><li>使用 <code>kubernetes</code> 或者 <code>docker compose</code> 做容器编排。在我内部集群中使用了 <code>compose</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/traefik-compose.md">docker compose 简易入门</a></li><li>使用 <code>gitlab ci</code>，<code>drone ci</code> 或者 <code>github actions</code> 等做 CI&#x2F;CD 自动部署。在我内部集群中使用了 <code>github actions</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/github-action-guide.md">github actions 简易入门</a></li></ul><p>这时镜像存在两个问题，导致每次部署时间过长，不利于产品的快速交付，没有快速交付，也就没有敏捷开发 (Agile)</p><ul><li>构建镜像时间过长</li><li>构建镜像大小过大，多时甚至 1G+</li></ul><h2 id="利用镜像缓存"><a href="#利用镜像缓存" class="headerlink" title="利用镜像缓存"></a>利用镜像缓存</h2><p>我们注意到，相对于项目的源文件来讲，<code>package.json</code> 是相对稳定的。如果没有新的安装包需要下载，则再次构建镜像时，无需重新构建依赖。则可以在 npm install 上节省一半的时间。</p><p>对于 <code>ADD</code> 来讲，如果需要添加的文件内容的 <code>checksum</code> 没有发生变化，则可以利用缓存。把 <code>package.json/package-lock.json</code> 与源文件分隔开写入镜像是一个很好的选择。目前，如果没有新的安装包更新的话，可以节省一半时间</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><br><span class="hljs-comment"># http-server 不变动也可以利用缓存</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install -g http-server</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-comment"># 首次添加此两个文件，充分利用缓存</span><br><span class="hljs-comment"># 当这两个文件不发生变化时，下一步的 npm i 将利用缓存不会执行</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># 这是镜像缓存的关键部分</span><br><span class="hljs-comment"># 注意此时把该命令放在了添加 package.json 之后</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>关于利用缓存有更多细节，需要特别注意一下。如 <code>RUN git clone &lt;repo&gt;</code>，如果命令字符串没有更新，则将使用缓存，当命令是非幂等性时，这将有可能导致问题。</p><blockquote><p>关于缓存及可能导致的问题，可以参考我的文章 <a href="https://shanyue.tech/op/dockerfile-practice.html#%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98">Dockerfile 最佳实践</a></p></blockquote><h2 id="CI-环境下的优化"><a href="#CI-环境下的优化" class="headerlink" title="CI 环境下的优化"></a>CI 环境下的优化</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-comment"># http-server 不变动也可以利用缓存</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install -g http-server</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-comment"># 首次添加此两个文件，充分利用缓存</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>在 CI 环境下主要做了一点改动：使用 <code>npm ci</code> 代替 <code>npm i</code>，经实验，<code>npm ci</code> 可以减少将近一半的的依赖安装时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install<br>added 1154 packages <span class="hljs-keyword">in</span> 60s<br><br>$ npm ci<br>added 1154 packages <span class="hljs-keyword">in</span> 35s<br></code></pre></td></tr></table></figure><p>另外，当 <code>package.json</code> 与 <code>package-lock.json</code> 版本不匹配时，<code>npm ci</code> 将会报出异常，提前检测出不安全信息，及早发现问题，及早解决问题。</p><p>关于安装依赖速度的优化，可以参考我以前的文章 <a href="https://shanyue.tech/frontend-engineering/npm-install.html">前端高级进阶：在生产环境中使你的 npm i 速度提升 50%</a> </p><h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h2><p>得益于缓存，现在镜像构建时间已经快了不少。但是，此时镜像的体积依旧过于庞大，这也将会导致部署时间的加长。原因如下</p><p>考虑下每次 CI&#x2F;CD 部署的流程</p><ol><li>在构建服务器 (Runer) 构建镜像</li><li>把镜像推至镜像仓库服务器</li><li>在生产服务器拉取镜像，启动容器</li></ol><p>显而易见，镜像体积过大会在前两步上传及下载时造成传输效率低下，增加每次部署的延时。</p><p>即使，构建服务器与生产服务器在同一节点下，没有延时的问题 (基本没可能)。减少镜像体积也能够节省磁盘空间。</p><p>关于镜像体积的过大，完全是因为node_modules 臭名昭著的体积:</p><p><img src="https://cdn.jsdelivr.net/gh/shfshanyue/assets@master/src/nodemodules.1qjzi8yeok80.png" alt="node_modules 的体积"></p><p>但最后我们只需要构建生成的静态资源，对于源文件以及 <code>node_modules</code> 下文件，占用体积过大且不必要，造成浪费。</p><p>此时可以利用 Docker 的多阶段构建，仅来提取编译后文件，即打包生成的静态资源。在这重要的一步中，我们把基础镜像由 <code>node</code> 改为效率更高、体积更小的 <code>nginx</code>，用以它提供基础服务。</p><p>由于 <code>nginx</code> 基础镜像默认暴露 80 端口，此时的 <code>EXPOSE 80</code> 可忽略不写。</p><p>对 Dockerfile 做一改进</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine as builder<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><br><span class="hljs-comment"># 选择更小体积的基础镜像</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /code/build /usr/share/nginx/html</span><br></code></pre></td></tr></table></figure><p>此时，镜像体积从 1G+ 变成了 50M+。若此时的部署仅仅是在测试环境或者多分支环境下为了方便测试，那就大功告成，完美解决问题了。</p><h2 id="使用对象存储服务-OSS"><a href="#使用对象存储服务-OSS" class="headerlink" title="使用对象存储服务 (OSS)"></a>使用对象存储服务 (OSS)</h2><p>分析一下 50M+ 的镜像体积，<code>nginx:alpine</code> 的镜像是16M，剩下的40M是静态资源。生产环境的静态资源往往会在独立域名上维护，并使用 CDN 进行加速。</p><p><strong>如果把静态资源给上传到文件存储服务，即OSS，并使用 CDN 对 OSS 进行加速，则没有必要打入镜像了。而在生产环境下也有对静态资源上 CDN 的强烈需求。</strong></p><p>此时镜像大小会控制在 20M 以下。虽然极大地减小了镜像体积，但是它会增加复杂度与增加镜像构建时间(如上传到OSS)，对于测试环境或者分支环境没必要使用 OSS。</p><p>关于静态资源，可以分类成两部分：</p><ul><li><code>/build</code>，此类文件在项目中使用 require&#x2F;import 引用，会被 webpack 打包并加 hash 值，并通过 publicPath 修改资源地址。可以把此类文件上传至 oss，并加上永久缓存，不需要打入镜像</li><li><code>/public</code>，此类文件在项目中直接引用根路径，直接打入镜像，如果上传至 OSS 可能增加复杂度 (批量修改 publicPath)</li></ul><p>此时通过一个脚本命令 <code>npm run uploadOss</code>，来把静态资源上传至 OSS。更新后的 Dockerfile 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine as builder<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><br><span class="hljs-comment"># npm run uploadOss 是把静态资源上传至 oss 上的脚本文件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build &amp;&amp; npm run uploadOss</span><br><br><span class="hljs-comment"># 选择更小体积的基础镜像</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder code/build/index.html code/public/favicon.ico /usr/share/nginx/html/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder code/build/static /usr/share/nginx/html/static</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经过本篇文章总结，在前端中构建镜像需要注意以下几点</p><ol><li>镜像中使用基于 <code>alpine</code> 的镜像，减小镜像体积。</li><li>镜像中需要锁定 <code>node</code> 的版本号，尽可能也锁定 <code>alpine</code> 的版本号，如 <code>node:10.19-alpine3.11</code>。(我示例代码中未如此详细地指出)</li><li>选择合适的环境变量 <code>NODE_ENV</code> 及 <code>PROJECT_ENV</code>，如在测试环境下进行构建</li><li>npm ci 替代 npm i，避免版本问题及提高依赖安装速度</li><li><code>package.json</code>&#x2F;<code>package-lock.json</code> 单独添加，充分利用镜像缓存</li><li>使用多阶段构建，在 node 环境中构建，在 nginx 环境中提供服务，减小镜像体积</li><li>如有必要，静态资源请上 CDN</li></ol>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名解析 | A记录 ，CNAME，MX你懂了吗？</title>
    <link href="/blog/2022/08/23/dns-cname/"/>
    <url>/blog/2022/08/23/dns-cname/</url>
    
    <content type="html"><![CDATA[<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>什么是域名解析？</p><p>域名解析就是国际域名、国内域名、中文域名等域名申请后做的到IP地址的转换过程。IP地址是网路上标识您站点的数字地址，为了简单好记，采用域名来代替ip地址标识站点地址。域名的解析工作由<code>DNS</code>服务器完成。</p><p>如下图，百度 <code>www.baidu.com</code> 就是域名，解析出来的<code>IP</code> <code>39.156.66.10</code> 这个过程就是域名解析。<br><img src="https://files.mdnice.com/user/13996/cd5eff55-8573-4395-8e7f-80d319fc85cf.png"></p><h2 id="A-记录"><a href="#A-记录" class="headerlink" title="A 记录"></a>A 记录</h2><p><code>A (Address)记录</code>是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的<code>web server</code>上。同时也可以设置您域名的二级域名。</p><p>又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p><p>  指向的目标主机地址类型只能使用IP地址；</p><ul><li>1.如何添加A记录</li></ul><p>  在“主机名”中填入子域的名字，“类型”为A，“IP地址&#x2F;主机名”中填入web服务器的IP地址，点击“新增”按钮即可。</p><p>  注：如果“主机名”一栏为空则表示对域名mydomain.com本身做指向。</p><ul><li>2.泛域名解析</li></ul><p>  即将该域名所有未指定的子域名都指向一个空间。</p><p>  在“主机名”中填入*，“类型”为A，“IP地址&#x2F;主机名”中填入web服务器的IP地址。</p><h2 id="CNAME记录"><a href="#CNAME记录" class="headerlink" title="CNAME记录"></a>CNAME记录</h2><p>  通常称别名指向。</p><p>  这种记录允许您将多个名字映射到另外一个域名。</p><p>  您可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机<a href="http://www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了./">www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</a></p><p>  - CNAME的目标主机地址只能使用主机名，不能使用IP地址；</p><p>  - 主机名前不能有任何其他前缀，如：http:&#x2F;&#x2F;等是不被允许的；</p><p>  - A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。 </p><h2 id="MX-记录"><a href="#MX-记录" class="headerlink" title="MX 记录"></a>MX 记录</h2><p>  邮件交换记录。</p><p>  用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p><p>  - MX记录可以使用主机名或IP地址；</p><p>  - MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；</p><p>  - 如果在“主机名”中填入子域名则此MX记录只对该子域名生效。 </p><h2 id="使用A记录和CNAME进行域名解析的区别"><a href="#使用A记录和CNAME进行域名解析的区别" class="headerlink" title="使用A记录和CNAME进行域名解析的区别?"></a>使用A记录和CNAME进行域名解析的区别?</h2><p>A记录就是把一个域名解析到一个IP地址（Address，特制数字IP地址），而CNAME记录就是把域名解析到另外一个域名。</p><p>其功能是差不多，CNAME将几个主机名指向一个别名，其实跟指向IP地址是一样的，因为这个别名也要做一个A记录的。</p><p>但是使用CNAME记录可以很方便地变更IP地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更IP时，只需要变更别名的A记录就可以了。</p><h2 id="使用A记录和CNAME哪个好？"><a href="#使用A记录和CNAME哪个好？" class="headerlink" title="使用A记录和CNAME哪个好？"></a>使用A记录和CNAME哪个好？</h2><p>域名解析CNAME记录A记录哪一种比较好？</p><p>如果论对网站的影响，就没有多大区别。但是：CNAME有一个好处就是稳定，就好像一个IP与一个域名的区别。服务商从方便维护的角度，一般也建议用户使用CNAME记录绑定域名的。如果主机使用了双线IP，显然使用CNAME也要方便一些。</p><p>A记录也有一些好处，例如可以在输入域名时不用输入WWW.来访问网站哦！从SEO优化角度来看，一些搜索引擎如alex或一些搜索查询工具网站等等则默认是自动去掉WWW.来辨别网站，CNAME记录是必须有如：WWW(别名)前缀的域名，有时候会遇到这样的麻烦，前缀去掉了默认网站无法访问。</p><p>有人认为，在SEO优化网站的时候，由于搜索引擎找不到去掉WWW.的域名时，对网站权重也会有些影响。因为有些网民客户也是不喜欢多写三个W来访问网站的，网站无法访问有少量网民客户会放弃继续尝试加WWW.访问域名了，因此网站访问浏览量也会减少一些。</p><p>也有人认为同一个域名加WWW.和不加WWW.访问网站也会使网站权重分散，这也是个问题。但是可以使用301跳转把不加WWW.跳转到加WWW.的域名，问题就解决了</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中new操作符的原理</title>
    <link href="/blog/2022/08/05/mock-new%20/"/>
    <url>/blog/2022/08/05/mock-new%20/</url>
    
    <content type="html"><![CDATA[<h2 id="new的用处"><a href="#new的用处" class="headerlink" title="new的用处"></a>new的用处</h2><p>new的作用是通过构造函数来创建一个实例对象，该实例与原型和构造函数之间的关系如下图所示：</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/08/05/18-48-49-e655bf8be2097ba1f24e62b5a22c2922-202171393058303-04e34a.jpeg"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>javascript中的new是一个语法糖，new的过程如下</p><ol><li>在内存中创建一个新对象</li><li>这个新对象内部的[[Prototype]]指针被赋值为构造函数的 prototype 属性</li><li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）</li></ol><blockquote><p>很多直接把下面4.5的归为一步</p></blockquote><ol start="4"><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</li></ol><h2 id="模拟-new-操作符"><a href="#模拟-new-操作符" class="headerlink" title="模拟 new 操作符"></a>模拟 new 操作符</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">constructor, ...arg</span>) &#123;<br>    <span class="hljs-comment">// ① 创建一个新的空对象 obj</span><br>    <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>    <span class="hljs-comment">// ② 将新对象的的原型指向当前函数的原型</span><br>    obj.<span class="hljs-property">__proto__</span> = constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <span class="hljs-comment">// ③ 新创建的对象绑定到当前this上</span><br>    <span class="hljs-keyword">const</span> result = constructor.<span class="hljs-title function_">apply</span>(obj, arg);<br>    <span class="hljs-comment">// ④ 如果没有返回其他对象，就返回 obj，否则返回其他对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;object&#x27;</span> ? result : obj; <span class="hljs-comment">// 为什么要判断返回值的类型？这是因为new一个实例的时候，如果没有return，就会根据构造函数内部this绑定的值生成对象，如果有返回值，就会根据返回值生成对象，为了模拟这一效果，就需要判断apply后是否有返回值。</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-keyword">var</span> luckyStar = <span class="hljs-title function_">_new</span>(<span class="hljs-title class_">Foo</span>, <span class="hljs-string">&#x27;luckyStar&#x27;</span>);<br><span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(luckyStar.<span class="hljs-property">name</span>); <span class="hljs-comment">//luckyStar</span><br><br></code></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">fn, ...arg</span>) &#123;<br>    <span class="hljs-comment">// 基于函数原型创建一个新的对象</span><br>    <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    <span class="hljs-keyword">const</span> newObj = fn.<span class="hljs-title function_">apply</span>(obj, arg);<br>    <span class="hljs-keyword">return</span> newObj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br>&#125;<br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GirlName</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> xiaoMei = <span class="hljs-title function_">_new</span>(<span class="hljs-title class_">GirlName</span>, <span class="hljs-string">&#x27;Xiao Mei&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xiaoMei) <br></code></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">New</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;&#125;; <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">let</span> constructor =  [].<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 获取构造函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">if</span> (constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> !== <span class="hljs-literal">null</span>) &#123;<br>        obj.<span class="hljs-property">__proto__</span> = constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 构造函数链接到新对象</span><br>    &#125;<br>    <span class="hljs-comment">// let ret = constructor.apply(obj, [].slice.call(arguments)); // 改变this指向 但是对参数使用slice会阻止某些JavaScript引擎中的优化</span><br>    <span class="hljs-keyword">let</span> ret = constructor.<span class="hljs-title function_">apply</span>(obj, (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span> ? [<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]] : <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable language_">arguments</span>))); <span class="hljs-comment">// 替代方案</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> ret);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&quot;function&quot;</span>) &amp;&amp; ret !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj; <span class="hljs-comment">// 如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用将返回该对象引用。</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">a, b</span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = a;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = b;<br>&#125;<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-title class_">New</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title function_">name</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br></code></pre></td></tr></table></figure><h2 id="为什么要判断返回值的类型？"><a href="#为什么要判断返回值的类型？" class="headerlink" title="为什么要判断返回值的类型？"></a>为什么要判断返回值的类型？</h2><p>这是因为new一个实例的时候，如果没有return，就会根据构造函数内部this绑定的值生成对象，如果有返回值，就会根据返回值生成对象，为了模拟这一效果，就需要判断apply后是否有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">GirlName</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br><br>    <span class="hljs-comment">// 如果这里 return &#x27;Tomboy&#x27;，最后的结果还是 &#x27;Xiao Mei&#x27;</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tomboy&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>        <span class="hljs-attr">sayName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xiaoMei = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlName</span>(<span class="hljs-string">&#x27;Xiao Mei&#x27;</span>, <span class="hljs-number">18</span>);<br>xiaoMei.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// Tomboy，这里的对象就成了构造函数返回的对象</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承</title>
    <link href="/blog/2022/07/21/inherit/"/>
    <url>/blog/2022/07/21/inherit/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是继承"><a href="#1-什么是继承" class="headerlink" title="1. 什么是继承?"></a>1. 什么是继承?</h2><ul><li>JS 中一切皆对象，必须有一种机制，把所有的对象联系起来，实现类似的“继承”机制。</li><li>不同于大部分面向对象语言，ES6 之前并没有引入类（class）的概念，JS 并非通过类而是通过构造函数来创建实例，javascript中的继承是通过原型链来体现的。</li><li>其基本思想是利用<strong>原型让一个引用类型继承另一个引用类型的属性和方法</strong>。</li></ul><h2 id="2-为什么要继承"><a href="#2-为什么要继承" class="headerlink" title="2.为什么要继承?"></a>2.为什么要继承?</h2><blockquote><p>提高代码的重用性、较少代码的冗余</p></blockquote><p>刚刚提到：”利用原型让一个引用类型继承另一个引用继承的属性和方法”,那么咱们先看下 原型，原型链相关的知识</p><h3 id="2-1-原型（prototype）"><a href="#2-1-原型（prototype）" class="headerlink" title="2.1 原型（prototype）"></a>2.1 原型（prototype）</h3><blockquote><p>JS中所有函数都会有prototype属性，只有函数才有其所有的属性和方法都能被构造函数的实例对象共享访问</p></blockquote><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br>   <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sayHello&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>   <span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">sayHello</span>) <span class="hljs-comment">//sayHello</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">sayHello</span>) <span class="hljs-comment">//sayHello</span><br></code></pre></td></tr></table></figure><h3 id="2-2-构造函数（constructor"><a href="#2-2-构造函数（constructor" class="headerlink" title="2.2 构造函数（constructor)"></a>2.2 构造函数（constructor)</h3><blockquote><p>JS 中 constructor 存在每个函数的 prototype 属性中，其保存了指向该函数的引用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">Person</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="2-3-原型链"><a href="#2-3-原型链" class="headerlink" title="2.3 原型链"></a>2.3 原型链</h3><blockquote><p>在 JavaScript 中是通过 prototype 对象指向父类对象，直到指向 Object 对象为止（person → Person → Object），这样就形成了一个原型指向的链条，专业术语称之为原型链</p></blockquote><ul><li>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</li><li>如果没有则去原型的原型中寻找,直到找到 Object 对象的原型，Object 对象的原型没有原型，如果在 Object 原型中依然没有找到，则返回 undefined。</li><li>注意：Object 的<em>proto</em>为空, 即原型链的尽头一般来说都是 Object.prototype</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p1.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><blockquote><p>JS 引擎查找摸个属性时，先查找对象本身是否存在该属性，如果不存在就会在原型链上一层一层进行查找</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f182141e627e498ea0aafea81cc5ff4d.png" alt="在这里插入图片描述"></p><h4 id="由图我们可知几个关系："><a href="#由图我们可知几个关系：" class="headerlink" title="由图我们可知几个关系："></a>由图我们可知几个关系：</h4><ul><li>每一个构造函数都有(原型)prototype 指向它的原型对象。</li><li>原型对象有 constructor 指向它的构造函数。</li><li>构造函数可以通过 new 的创建方式创建实例对象</li><li>实例对象通过 proto 指向它的原型对象。</li><li>原型对象也有自己的原型对象，通过 proto 指向。</li></ul><h2 id="3-目前我总结常用的一共有6种继承方式"><a href="#3-目前我总结常用的一共有6种继承方式" class="headerlink" title="3.目前我总结常用的一共有6种继承方式"></a>3.目前我总结常用的一共有6种继承方式</h2><ul><li>原型链继承</li><li>借用构造函数继承</li><li>组合式继承（原型链+构造函数）</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承<br>咱们本期先讲解 <strong>原型链继承</strong>和<strong>原型式继承</strong> ，如果想了解其他的继承可查看我的 关于 <a href="https://blog.csdn.net/qq_34574204/article/details/120716964">详解 js 继承的那些事儿</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;this.name&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="3-1-原型链继承"><a href="#3-1-原型链继承" class="headerlink" title="3.1 原型链继承"></a>3.1 原型链继承</h3><p><strong>实现方式：</strong> 让实例的原型等于父类的实例</p><p><strong>优点：</strong> 实例可以继承父类的构造个函数，实例的构造函数，父类的原型</p><p><strong>缺点：</strong> 不能向父类传递参数，由于实例的原型等于父类的实例，那么改变父类的属性，实例的属性也会跟着改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;xiaoming&quot;</span><br>&#125;<br>child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br>child1.<span class="hljs-property">name</span> <span class="hljs-comment">//xiaoming</span><br>child1.<span class="hljs-property">age</span> <span class="hljs-comment">//100</span><br>child1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="3-2-原型式继承"><a href="#3-2-原型式继承" class="headerlink" title="3.2 原型式继承"></a>3.2 原型式继承</h3><p><strong>实现方式：</strong> 函数包装对象，返回对象的引用，这个函数就变成可以随时添加实例或者对象，Object.create()就是这个原理</p><p><strong>优点：</strong> 复用一个对象用函数包装</p><p><strong>缺点：</strong> 所有实例都继承在原型上面 无法复用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">child</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = obj<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">let</span> child2 = <span class="hljs-title function_">child</span>(child1)<br>child2.<span class="hljs-property">age</span> <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭配 Fluid 如何优雅的写一篇文章</title>
    <link href="/blog/2021/07/11/fluid-write/"/>
    <url>/blog/2021/07/11/fluid-write/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Vince<br>原文地址：<a href="https://i.vince.pub/p/fluid-write/">https://i.vince.pub/p/fluid-write/</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。</p><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><h3 id="熟悉-Markdown-语法"><a href="#熟悉-Markdown-语法" class="headerlink" title="熟悉 Markdown 语法"></a>熟悉 Markdown 语法</h3><p>对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 <strong>Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。</strong></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>站点</th><th align="center">地址</th><th align="right">介绍</th></tr></thead><tbody><tr><td>Fluid Docs</td><td align="center"><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></td><td align="right">Fluid 官方文档</td></tr><tr><td>Hexo-theme-fluid</td><td align="center"><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></td><td align="right">Fluid Github Repo</td></tr><tr><td>Fluid Blog</td><td align="center"><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></td><td align="right">Fluid 官方博客</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">站点|地址|介绍<br>--|:--:|--:<br>Fluid Docs|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com<span class="hljs-regexp">/docs/</span>|Fluid 官方文档<br>Hexo-theme-fluid|https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid|Fluid Github Repo<br>Fluid Blog|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com/|Fluid 官方博客<br></code></pre></td></tr></table></figure><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>默认渲染器下正常显示，不同渲染器显示效果不同，写法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注演示[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注内容演示</span><br></code></pre></td></tr></table></figure><h3 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h3><p>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。</p><p><a id="demo">跳转位置演示（跳转位置设置点）</a></p><h4 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h4><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #519D9E; &quot;</span>&gt;</span>#519D9E颜色演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h4><p><span  style="font-size:0.7em;">0.7em 文字大小演示</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.7em;&quot;</span>&gt;</span>0.7em 文字大小演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="文字位置"><a href="#文字位置" class="headerlink" title="文字位置"></a>文字位置</h4><p style="text-align:center">内容居中演示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span>内容居中演示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> # 可以修改 text-align 参数来设置文字位置。<br></code></pre></td></tr></table></figure><hr><h4 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h4><p><a href="#demo">点击到达跳转位置演示</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;#demo&quot;</span>&gt;点击到达跳转位置演示&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在需要跳转的地方添加此代码。</span><br>&lt;<span class="hljs-keyword">a</span> id=<span class="hljs-string">&quot;demo&quot;</span>&gt;跳转位置演示（跳转位置设置点）&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在跳转位置添加次代码。</span><br></code></pre></td></tr></table></figure><hr><h4 id="综合演示"><a href="#综合演示" class="headerlink" title="综合演示"></a>综合演示</h4><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid 写文章</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;&quot;</span>&gt;</span><br>综合演示<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>优雅使用 Fluid 写文章<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="iframe-页面镶套"><a href="#iframe-页面镶套" class="headerlink" title="iframe 页面镶套"></a>iframe 页面镶套</h4><p>iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。</p><iframe src="https://hexo.fluid-dev.com/" width="100%" height="650" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attribute">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attribute">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>一些参数说明，<code>width=&quot;100%&quot;</code> 为宽度自适应，高度请根据实际需求跳转，<strong>注意移动端页面是否匹配。</strong> <code>scrolling</code> 为滚动条参数。<code>frameborder</code> 为边框参数。<code>noresize</code> 属性规定用户无法调整框架的大小。</p><h4 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a>details 标签</h4><p>用于展示代码较多需要折叠或折叠相关内容，以下为演示。<code>summary</code> 填写显示名称。</p><details><summary>Demo</summary><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></details><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="善用-Tag-组件"><a href="#善用-Tag-组件" class="headerlink" title="善用 Tag 组件"></a>善用 Tag 组件</h3><p>Fluid 内置了许多 Tag 组件，包含便签、行内标签（已知不会出现间隔，谨慎使用）、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，**<a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">点击跳转到 Fluid Doc</a>**。</p><h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h2><p>众所周知，<strong>博客好不好看，配图占一半</strong>。这里给大家推荐几个我常用找配图的地方。<strong>另外，请遵循相关网站的版权协议。</strong></p><h3 id="Wallpaper-Hub"><a href="#Wallpaper-Hub" class="headerlink" title="Wallpaper Hub"></a>Wallpaper Hub</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-04-17_175244.png" alt="Wallpaper Hub"></p><p><strong><a href="https://wallpaperhub.app/">点击跳转到 Wallpaper Hub</a></strong></p><h3 id="Wallhaven"><a href="#Wallhaven" class="headerlink" title="Wallhaven"></a>Wallhaven</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-04-17_174841.png" alt="Wallhaven"></p><p><strong><a href="https://wallhaven.cc/">点击跳转到 Wallhaven</a></strong></p><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-05-14_000557.png" alt="Unsplash"></p><p><strong><a href="https://unsplash.com/">点击跳转到 Unsplash</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>用户经验</tag>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Netlify CMS 在线编辑博客</title>
    <link href="/blog/2021/04/20/hexo-netlify/"/>
    <url>/blog/2021/04/20/hexo-netlify/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：千泷<br>原文地址：<a href="https://www.myql.xyz/post/e00ab0f6/">https://www.myql.xyz/post/e00ab0f6/</a></p>          </div><h2 id="✨-前言"><a href="#✨-前言" class="headerlink" title="✨ 前言"></a>✨ 前言</h2><p>我们都知道，<a href="https://hexo.io/zh-cn/">Hexo</a> 是一个静态部署博客的框架，优点在于速度快，成本低（无需服务器），缺点在于繁琐，你每次更新文章都需要去改代码，再部署推送，修改配置也是如此，你不能像 <code>WordPress</code> 一样直接在后台修改配置并使它生效。</p><p>不过有很多教程可以让你无需繁琐的部署，只管推送代码，通过 <code>GitHub Actions</code>，<code>travis-ci</code>，<a href="https://vercel.com/">vercel</a>，<a href="Netlifyhttps://www.netlify.com/">Netlify</a> 等都可以便捷的进行博客的部署，只管写代码然后推送就好，类似的教程有非常多，在此就不再重复介绍。那么，我们是否可以在此基础上，更加便捷的进行静态博客的写作和管理？答案是可以的。</p><p>我们可以通过将博客部署到 <a href="https://www.netlify.com/">Netlify</a>，并使用 <a href="https://www.netlifycms.org/">Netlify CMS</a> 来做到这一点。</p><p>首先，我们来了解一下配置完之后可以做到哪些事情？</p><ul><li>在线新建，编辑，预览，删除博客文章</li><li>支持文章草稿，工作流</li><li>支持对博客图片的管理</li><li>支持在线修改博客配置，例如对首页顶部图的修改，友链的修改</li></ul><hr><h3 id="🎈-图片预览"><a href="#🎈-图片预览" class="headerlink" title="🎈 图片预览"></a>🎈 图片预览</h3><p>配置完的界面</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420211303684.png" alt="image-20210420211303684"></p><p>在线对文章进行编辑，修改</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418222435713.png" alt="image-20210418222435713"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418222455291.png" alt="image-20210418222455291"></p><p>工作流</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420212403763.png" alt="image-20210420212403763"></p><p>对媒体资源的管理</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420212801157.png" alt="image-20210420212801157"></p><p>对其他页面的修改</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420213123997.png" alt="image-20210420213123997"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420213142628.png" alt="image-20210420213142628"></p><p>在线修改博客首页、文章页、归档页等页面的顶部图</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420214308165.png" alt="image-20210420214308165"></p><p>在线添加、编辑友链页面</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418223337304.png" alt="image-20210418223337304"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418223354013.png" alt="image-20210418223354013"></p><h3 id="🔗-在线演示"><a href="#🔗-在线演示" class="headerlink" title="🔗 在线演示"></a>🔗 在线演示</h3><p>为了更加直观，做了一个已经配置完毕的博客，你可以在线体验上述功能 👉<a href="https://qwqmiao.cf/admin/">点我查看</a></p><h2 id="📃-简单说明"><a href="#📃-简单说明" class="headerlink" title="📃 简单说明"></a>📃 简单说明</h2><p>下面我将会以 <a href="https://hexo.io/zh-cn/">Hexo</a> + 做演示，并配置 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>的友链功能，达到在线编辑预览友链的目的，但此方法不仅仅只适用于 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>的友链功能，其他各类主题也可以通过此方法达到在线修改配置的目的，只要你配置完成，几乎可以修改所有配置项。包括但不限于以下类型的文件<code>yml</code>、<code>yaml</code>、<code>toml</code>、<code>json</code>、<code>md</code>、<code>markdown</code>、<code>html</code>具体请查看 👉<a href="https://www.netlifycms.org/">Netlify CMS</a> 文档。</p><h2 id="🔧-具体配置"><a href="#🔧-具体配置" class="headerlink" title="🔧 具体配置"></a>🔧 具体配置</h2><p><a href="https://www.netlifycms.org/">Netlify CMS</a> 使用的前提条件是你必须将博客部署到 <a href="https://www.netlify.com/">Netlify</a> 上。因为网上有很多部署教程，这里不再重复。</p><p>具体可以查看：</p><ul><li><a href="https://guanqr.com/tech/website/deploy-blog-to-netlify/">博客通过 Netlify 实现持续集成</a></li><li><a href="https://io-oi.me/tech/deploy-static-site-to-netlify/">将 Hexo 静态博客部署到 Netlify</a></li></ul><h3 id="👟-准备工作"><a href="#👟-准备工作" class="headerlink" title="👟 准备工作"></a>👟 准备工作</h3><p>在部署完成后，你需要开启 <code>Identity</code></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225044656.png" alt="image-20210418225044656"></p><p>进入设置中</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225125358.png" alt="image-20210418225125358"></p><p>将 <code>Registration preferences</code> 修改为 <code>Invite only</code> 此项为是否开启注册，默认是开启注册。修改为 <code>Invite only</code> 后表示仅受邀请的用户可以注册，当然此项你可以在自己注册完毕之后再行修改。</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225239607.png" alt="image-20210418225239607"></p><p>下滑找到 <code>Git Gateway</code> 并开启。</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225726557.png" alt="image-20210418225726557"></p><p>至此准备工作完成</p><h3 id="🎨-修改博客配置"><a href="#🎨-修改博客配置" class="headerlink" title="🎨 修改博客配置"></a>🎨 修改博客配置</h3><blockquote><p>在博客根目录中找到<code>_config.yml</code>并修改，这一步是跳过文件夹渲染，不然后面会出错</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">admin/*</span><br></code></pre></td></tr></table></figure><p>在博客<code>source</code>文件夹中，创建<code>admin</code>文件夹，并新建两个文件<code>index.html</code>和<code>config.yml</code></p></blockquote><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418230338242.png" alt="image-20210418230338242"></p><p>在 <code>index.html</code> 中添加以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;x-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=Edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;white&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>魔王の领地<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">      <span class="hljs-attr">defer</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/netlify-cms@2/dist/netlify-cms.js&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>config.yml</code> 中添加如下折叠内容</p><details><summary>点击展开配置内容</summary><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">backend:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">git-gateway</span> <span class="hljs-comment"># https://github.com/netlify/netlify-cms</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 要更新的分支(可选；默认为主分支)</span><br><span class="hljs-comment"># This line should *not* be indented</span><br><span class="hljs-attr">publish_mode:</span> <span class="hljs-string">editorial_workflow</span><br><span class="hljs-comment"># This line should *not* be indented</span><br><span class="hljs-attr">media_folder:</span> <span class="hljs-string">&quot;source/images/uploads&quot;</span> <span class="hljs-comment"># 媒体文件将存储在图片/上载下的Repo中。</span><br><span class="hljs-attr">public_folder:</span> <span class="hljs-string">&quot;/images/uploads&quot;</span> <span class="hljs-comment"># 上传的媒体的src属性将以/images/uploads开头。</span><br><span class="hljs-attr">site_url:</span> <span class="hljs-string">https://www.myql.xyz</span> <span class="hljs-comment"># 网站网址</span><br><span class="hljs-attr">display_url:</span> <span class="hljs-string">https://www.myql.xyz</span> <span class="hljs-comment"># 显示网址</span><br><span class="hljs-attr">locale:</span> <span class="hljs-string">&quot;zh_Hans&quot;</span> <span class="hljs-comment"># 语言环境 https://github.com/netlify/netlify-cms/tree/master/packages/netlify-cms-locales/src</span><br><span class="hljs-attr">collections:</span>      <span class="hljs-comment"># https://www.netlifycms.org/docs/configuration-options/#collections</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-comment"># 在路由中使用，例如：/admin/collections/blog。</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-comment"># 在用户界面中使用</span><br>    <span class="hljs-attr">folder:</span> <span class="hljs-string">&quot;source/_posts&quot;</span> <span class="hljs-comment"># 存储文件的文件夹的路径。</span><br>    <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 允许用户在这个集合中创建新的文件。</span><br>    <span class="hljs-attr">fields:</span> <span class="hljs-comment"># 每份文件的字段，通常是前面的内容。</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125; <br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章封面&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;index_img&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125; <br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章排序&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;sticky&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;发布日期&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="hljs-attr">dateFormat:</span> <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>, <span class="hljs-attr">timeFormat:</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;更新日期&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;updated&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="hljs-attr">dateFormat:</span> <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>, <span class="hljs-attr">timeFormat:</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;tags&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;分类&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;categories&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关键词&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;keywords&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;摘要&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;excerpt&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;内容&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;markdown&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;永久链接&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;permalink&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;评论&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;comments&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;boolean&quot;</span>, <span class="hljs-attr">default:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;pages&quot;</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Pages&quot;</span><br>    <span class="hljs-attr">files:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">&quot;source/about/index.md&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;about&quot;</span><br>        <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关于&quot;</span><br>        <span class="hljs-attr">fields:</span><br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>&#125;<br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;内容&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;markdown&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;评论&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;comments&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;boolean&quot;</span>, <span class="hljs-attr">default:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br><span class="hljs-comment"># 如果你不是Fluid 主题，请删除以下配置，或者对文件路径及字段进行修改</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;settings&quot;</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;settings&quot;</span><br>    <span class="hljs-attr">files:</span>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">&quot;source/_data/fluid_config.yml&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;fluid&quot;</span><br>        <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Fluid 主题配置&quot;</span><br>        <span class="hljs-attr">editor:</span><br>          <span class="hljs-attr">preview:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 是否开启编辑预览</span><br>        <span class="hljs-attr">fields:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;首页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;index&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 是否折叠显示</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;post&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图(默认)&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span> <br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章封面图(默认)&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;default_index_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;归档页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;archive&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;分类页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;category&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标签页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;tag&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关于页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;about&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;友链页面&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;links&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;项目&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;items&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span><br>                <span class="hljs-attr">fields:</span><br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站名称&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网址描述&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;intro&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站地址&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;link&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站图片&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;avatar&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure></details><p>请注意，这里我对 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>进行了配置，例如<code>banner_img</code>、<code>index_img</code>等项目，不能正常使用请删除，如果你不是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>请根据实际情况对<code>source\admin\config.yml</code>配置进行修改，如果你和我一样是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>，还需要将主题配置文件（<code>/_config.fluid.yml</code>）中的相对应的字段及其内容一并注释掉才能使其生效，类似于这样</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420221125705.png" alt="image-20210420221125705"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210419015951835.png" alt="image-20210419015951835"></p><p>并且创建<code>source\_data\fluid_config.yml</code>，将相关配置复制粘贴到里面（请根据此配置去主题配置文件中注释掉相对应的字段）</p><details><summary>点击展开配置内容</summary><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/images/background.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/mmexport1602581319886.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-g8wvm7.webp</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-q6ov7d.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-zm93dj.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-1kkm2g.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-pkkr2.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-rddv31.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">小丁的个人博客</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">世间所有的相遇，都是久别重逢</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://tding.top</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://tding.top/images/avatar.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">米奇妙妙屋</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">逐风揽月登九天</span> <span class="hljs-string">踏浪擒龙游四海</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://ifibe.com/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/avatar.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">荷戟独彷徨</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">爱光学，爱生活，爱创造</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://guanqr.com/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/guanqr/blog/static/icons/android-chrome-512x512.png</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">iMaeGoo’s</span> <span class="hljs-string">Blog</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">虹墨空间站</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://www.imaegoo.com</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://www.imaegoo.com/images/avatar.jpg</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">琉仙の后花园</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">一起来种花家呀</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://blog.lx101.cn/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://z3.ax1x.com/2021/03/28/cS2LNV.jpg</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">LOGI</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">会点代码的强迫症</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://logi.im</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://code.bdstatic.com/npm/logicdn@1.0.0/logi.im/usr/images/global/logo.webp</span><br></code></pre></td></tr></table></figure></details><p>请保持这样的格式，当然如果你对<code>yml</code>语法非常了解也可以自行修改 🤣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-comment"># 博客名称</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-comment"># 博客描述</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-comment"># 博客链接</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-comment"># 博客logo</span><br></code></pre></td></tr></table></figure><h3 id="🤣-结语"><a href="#🤣-结语" class="headerlink" title="🤣 结语"></a>🤣 结语</h3><p>说一下为什么不推荐直接修改根目录下的 <code>_config.fluid.yml</code> 因为通过 <a href="https://www.netlifycms.org/">Netlify CMS</a> 在线修改配置文件后，仅会保留你已经在 <code>source\admin\config.yml</code> 中配置的选项，没有配置的选项会默认清空，按主题默认配置进行，你当然可以将所有选项进行配置，但是没必要，所以推荐通过 <code>source\_data\fluid_config.yml</code> 仅复制粘贴需要的选项进行修改配置。</p><hr><p>至此 <a href="https://www.netlifycms.org/">Netlify CMS</a> 配置就算完成了，只要推送代码，等待片刻，通过你部署在 <a href="https://www.netlify.com/">Netlify</a> 上的域名，加 <code>/admin/</code> 即可访问你的博客后台。</p><h2 id="🚀-一键部署"><a href="#🚀-一键部署" class="headerlink" title="🚀 一键部署"></a>🚀 一键部署</h2><p>如果你感觉有点繁琐，或者怕配置出错可以直接使用我配置好的<code>一键部署</code>来快速搭建你的博客 👉<a href="https://github.com/leicancun/hexo-blog-netlify">点击前往</a></p><p>ps: 即使是一键部署也不要忘记<code>准备工作</code>里的步骤，这很重要</p><h2 id="😕-改进计划"><a href="#😕-改进计划" class="headerlink" title="😕 改进计划"></a>😕 改进计划</h2><p><del>因为对 css 不太熟悉，并没有设置页面自适应，导致现在编辑页面的预览体验很差，在手机上显示也不甚理想，等我多熟悉熟悉 css 然后弄一下自适应。</del></p><p>目前对图片并没有自适应，在手机上显示的效果也不算好，因为能力有限折腾了很久没弄明白，官方文档在这里 👉<a href="https://www.netlifycms.org/docs/customization/">点我查看</a><br>如果能有大佬能帮助我就更好了，十分欢迎各位大佬</p><h2 id="😁-感谢"><a href="#😁-感谢" class="headerlink" title="😁 感谢"></a>😁 感谢</h2><p>十分感谢 <a href="https://github.com/zkqiang">zkqiang</a> 大佬对我的耐心帮助 🎉🎉🎉</p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>用户经验</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Fluid</title>
    <link href="/blog/2020/04/22/hello-fluid/"/>
    <url>/blog/2020/04/22/hello-fluid/</url>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。</p></blockquote><span id="more"></span><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>文章大部分使用的是 github-markdown 样式，并加入了一些 Material 风格。</p><h3 id="H3-标题"><a href="#H3-标题" class="headerlink" title="H3 标题"></a>H3 标题</h3><h4 id="H4-标题"><a href="#H4-标题" class="headerlink" title="H4 标题"></a>H4 标题</h4><p><strong>粗体</strong></p><p><em>斜体</em></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码：<code>$ hexo new post &quot;My New Post&quot;</code></p><p>代码高亮使用的是 highlight.js，支持 185 种语言和 91 种高亮样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a &lt; n:<br>        <span class="hljs-built_in">print</span>(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        a, b = b, a+b<br>    <span class="hljs-built_in">print</span>()<br>fib(<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;<br>    mu Mutex<br>    read atomic.Value<br>    dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry<br>    misses <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Header 1</th><th>Header 2</th><th>Header 3</th></tr></thead><tbody><tr><td>Key 1</td><td>Value 1</td><td>Comment 1</td></tr><tr><td>Key 2</td><td>Value 2</td><td>Comment 2</td></tr><tr><td>Key 3</td><td>Value 3</td><td>Comment 3</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Fluid 相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备；</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Fluid 功能特性：</p><ul><li>图片懒加载</li><li>自定义代码高亮方案</li><li>内置多语言</li><li>支持多款评论插件</li><li>支持使用数据文件存放配置</li><li>自定义静态资源 CDN</li><li>内置文章搜索</li><li>页脚备案信息</li><li>网页访问统计</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li><li>音乐播放器</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/post.png?w=1280&fmt=webp"></p><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>基于 MathJax 引擎：</p><p>$$<br>\Gamma _ { \epsilon } ( x ) &#x3D; [ 1- e ^ { - 2\pi \epsilon } ] ^ { 1- x } \prod _ { n &#x3D; 0} ^ { \infty } \frac { 1- \operatorname{exp} ( - 2\pi \epsilon ( n + 1) ) } { 1- \operatorname{exp} ( - 2\pi \epsilon ( x + n ) ) }<br>$$</p><p>$$<br>\left( \begin{array} c t ^ { \prime } \ x ^ { \prime } \ y ^ { \prime } \ z ^ { \prime } \end{array} \right) &#x3D; \left( \begin{array} { c c c c } { \gamma } &amp; { - \gamma \beta } &amp; { 0 } &amp; { 0 } \ { - \gamma \beta } &amp; { \gamma } &amp; { 0 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right) \left( \begin{array} c t \ x \ y \ z \end{array} \right)<br>$$</p><p>$$<br>6 \mathrm { CO } _ { 2 } + 6 \mathrm { H } _ { 2 } \mathrm { O } \rightarrow \mathrm { C } _ { 6 } \mathrm { H } _ { 12 } \mathrm { O } _ { 6 } + 6 \mathrm { O } _ { 2 }<br>$$</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>基于 mermaid 语法：</p><pre><code class=" mermaid">sequenceDiagramparticipant Aliceparticipant BobAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts &lt;br/&gt;prevail...John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="内置-Tag-插件"><a href="#内置-Tag-插件" class="headerlink" title="内置 Tag 插件"></a>内置 Tag 插件</h2><p>内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 <a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">用户指南</a>。</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-info">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-warning">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-primary">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><span class="label label-info">行内标签</span> <span class="label label-warning">行内标签</span> <span class="label label-primary">行内标签</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div>            <input type="checkbox" disabled checked="checked">主要是解决一些 Renderer 不支持勾选          </div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="javascript:;"  target="_blank">支持链接</a><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>以下是脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注演示">[1]</span></a></sup>：</p><p>如果你有 Fluid 主题或 Hexo 博客相关的文章，可以通过 Pull Request 方式投稿<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="投稿具体详见[https://github.com/fluid-dev/hexo-fluid-blog](https://github.com/fluid-dev/hexo-fluid-blog)">[2]</span></a></sup>。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>投稿具体详见<a href="https://github.com/fluid-dev/hexo-fluid-blog">https://github.com/fluid-dev/hexo-fluid-blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
