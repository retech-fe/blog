<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在生产环境中使你的 npm i 速度提升 50%</title>
    <link href="/blog/2022/09/03/npm-install/"/>
    <url>/blog/2022/09/03/npm-install/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>纯前端<code>Web</code>应用或<code>Node</code> 应用，在 <code>CICD pipeline</code> 中，无论是构建、测试、部署，通常第一步就是依赖安装: <code>npm i</code>。但是通常<code>npm i</code> 是耗时最长的一个环节。</p><p>如果依赖安装时间变短，就能极大地缩短部署时间，从而提高产品交付效率。</p><p><code>CI</code> 环境中的优化通常指的是生产环境: </p><p>在本地环境中安装依赖是有状态的，如 <code>node_modules</code>，<code>~/.npmrc</code>，<code>~/.npm</code> 一系列硬盘目录及文件，无不构成状态。</p><p>而在生产环境中，往往结合 <code>CICD</code> 工具，每次分配的 <code>Runner</code> 不一定是一台服务器(容器)，往往被视为无状态，因而无法有效利用缓存而导致 <code>CI</code> 中部署用时过长。</p><p>但也正因为 <code>CICD Runner</code> 的无状态化，这意味着你只要参考构建脚本，如 .<code>gitlab-ci.yaml</code>，<code>.travis.yaml</code> 或者 <code>.github/workflows/deploy.yaml</code>，就可以从零把项目跑起来，而避免过多在熟悉新项目时求助他人。</p><p>不同的部署方式，不同的持续集成工具有不同的实践方法，但优化的原理大同小异。</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/09/03/09-38-21-131c7d3d678f5e347fe2f889b4e6418f-20220903093820-10b48a.png"></p><h2 id="只安装生产环境使用的库"><a href="#只安装生产环境使用的库" class="headerlink" title="只安装生产环境使用的库"></a>只安装生产环境使用的库</h2><p><code>npm install</code> 的速度显然与它依赖的包的多少是正相关的，那减少包的数量就可以减少装包所花费的时间。</p><p>使用 <code>--production</code> 可以只安装 <code>package.json</code> 中 <code>dependencies</code> 中的依赖项，只把要安装在 <code>CI</code> 中需要使用到的依赖。在生产环境部署时可以指定 <code>--production</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --production<br></code></pre></td></tr></table></figure><p>另外，通过设置环境变量 <code>NODE_ENV=production</code> 相当于指定 <code>--production</code>，测试如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">NODE_ENV=production npm config get production</span><br>true<br></code></pre></td></tr></table></figure><p>这需要我们根据到底是开发环境使用还是生产环境使用，从而把 <code>packages</code> 分拣到 <code>devDependencies</code> 与 <code>dependencies</code> 中。</p><h2 id="使用私有镜像仓库"><a href="#使用私有镜像仓库" class="headerlink" title="使用私有镜像仓库"></a>使用私有镜像仓库</h2><p>从 <code>npm</code> 的官方仓库可以发布与拉取 <code>package</code>，比如 <code>react</code>，<code>vue</code> 和 <code>express</code> 都发布在官方仓库中。官方 <code>registory</code> 地址是 <code>https://registry.npmjs.org/</code>，这对国内的前端应用来说，由于远在国外，远程仓库的服务器时延过大，此时的瓶颈在于网络。</p><p>国内的公有镜像库，如淘宝镜像，它每隔十分钟与官方镜像仓库同步一次，而它位于国内，网络也很快。</p><p>对于企业级项目的生产环境来说，在集群内部搭建私有仓库是一个更好的选择，也更能缩短时延。 流量能在局域网完成的，就不需要去互联网中溜圈了。</p><p>使用 <code>npm config</code> 来设置 <code>npm</code> 仓库，它将把仓库信息写入 <code>~/.npmrc </code>中，这足以适用于<code>CICD</code> 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.peffy.tech/<br></code></pre></td></tr></table></figure><h2 id="利用缓存"><a href="#利用缓存" class="headerlink" title="利用缓存"></a>利用缓存</h2><p><code>npm install</code>不能慢两次；正如 <code>http cache</code> 一样，<code>npm install</code> 也可以充分利用缓存，npm 的缓存在 <code>linux</code> 系统中存在于以下路径:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/.npm<br></code></pre></td></tr></table></figure><p>命令 <code>npm cache verify</code> 可以校验缓存，如下所示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm cache verify</span><br>Cache verified and compressed (~/.npm/_cacache):<br>Content verified: 4415 (156612117 bytes)<br>Index entries: 6239<br>Finished in 14.017s<br></code></pre></td></tr></table></figure><p>结合 <code>npm install --prefer-offline</code> 缓存优先策略充分利用缓存</p><p>但是有一个悖论，在 <code>CI</code> 中是无状态的: 你本次装的 <code>node_modules</code> 和生成的 <code>~/.npm</code> 将会在下次装包时丢失。</p><p>这时候就需要利用 <code>CI</code> 的缓存功能，如以下是 <code>travis ci</code> 的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">install:<br>- npm ci<br><span class="hljs-meta prompt_"># </span><span class="language-bash">keep the npm cache around to speed up installs</span><br>cache:<br>  directories:<br>  - &quot;$HOME/.npm&quot;<br><br></code></pre></td></tr></table></figure><h2 id="progress-屏蔽非必要打印信息"><a href="#progress-屏蔽非必要打印信息" class="headerlink" title="progress: 屏蔽非必要打印信息"></a>progress: 屏蔽非必要打印信息</h2><p>当设置 <code>progress</code> 为 <code>true</code> 时，<code>npm install</code> 时将会显示进度条，把它设置为 <code>false</code> 可小幅提高 <code>npm install</code> 的速度。</p><p>修改设置:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">set</span> <span class="hljs-attribute">progress</span>=<span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><p>在<a href="https://docs.npmjs.com/cli/v8/using-npm/config">官方文档中</a>对 progress 有以下介绍：</p><blockquote><p>Default: true, unless TRAVIS or CI env vars set. Type: Boolean</p></blockquote><p>因此，只需要在构建服务器中简单设置一个 <code>CI=true</code> 的环境变量即可以很轻便地解决问题</p><h2 id="使用-npm-ci-替代-npm-i"><a href="#使用-npm-ci-替代-npm-i" class="headerlink" title="使用 npm ci 替代 npm i"></a>使用 npm ci 替代 npm i</h2><p>单看名字，里边有个 <code>CI</code>，它就像适用在 <code>CI</code> 中，事实也如此。它在 <code>CI</code> 环境中做了一系列优化，如去除掉一些面向用户的特性来加强速度。除了性能，它也有一些在 <code>CI</code> 上基于完整性与安全性的检查，如 <code>package.json</code> 与 <code>package-lock.json</code> 版本不一致的问题。</p><p>为了更好地提高速度，<code>npm ci</code> 基于一个独立的库<a href="https://github.com/npm/libcipm">libcipm</a>安装依赖，而它拥有和 <code>npm install</code> 兼容的 <code>API</code>。并且当它安装依赖时，默认是缓存优先的，它会充分利用缓存，从而加速装包。</p><p>经实验，<code>npm ci</code> 可以减少将近一半的的依赖安装时间。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">added </span><span class="hljs-number">1154</span> packages in <span class="hljs-number">60</span>s<br><br>$ npm ci<br><span class="hljs-keyword">added </span><span class="hljs-number">1154</span> packages in <span class="hljs-number">35</span>s<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下如何减少 <code>npm install</code> 的时间，都是很简单的设置，一分钟搞定</p><ul><li>选择时延低的 registry，需要企业技术基础建设支持</li><li>NODE_ENV&#x3D;production，只安装生产环境必要的包(如果 dep 与 devDep 没有仔细分割开来，工作量很大，可以放弃)</li><li>CI&#x3D;true，npm 会在此环境变量下自动优化</li><li>结合 CI 的缓存功能，充分利用 npm cache</li><li>使用 npm ci 代替 npm i，既提升速度又保障应用安全性</li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 docker 部署前端项目</title>
    <link href="/blog/2022/08/28/docker-cicd/"/>
    <url>/blog/2022/08/28/docker-cicd/</url>
    
    <content type="html"><![CDATA[<p>Docker 变得越来越流行，它可以轻便灵活地隔离环境，进行扩容，运维管理。对于业务开发者而言，随着持续集成的发展，对代码质量及快速迭代的要求也越来越高。</p><p>对于前端而言，在 CI 环境中使用也更容易集成开发，测试与部署。比如可以为流水线(Pipeline)设置 Lint&#x2F;Test&#x2F;Security&#x2F;Audit&#x2F;Deploy&#x2F;Artifact 等任务，更好地把控项目质量。</p><p>这里将介绍如何使用 Docker 部署前端应用，千里之行，始于足下。始于足下的意思就是，先让它能够跑起来。</p><h2 id="先让它跑起来"><a href="#先让它跑起来" class="headerlink" title="先让它跑起来"></a>先让它跑起来</h2><p>首先，简单介绍一下一个典型的前端应用在生产环境中的部署流程</p><ol><li><code>npm install</code>, 安装依赖</li><li><code>npm run build</code>，编译，打包，生成静态资源</li><li>服务化静态资源，如 nginx</li></ol><p>介绍完部署流程后，简单写一个 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用 node:14-alpine 基础镜像</span><br><span class="hljs-comment"># 带有 alpine 标签的基础镜像基于最小化的操作系统 alpine，拥有更小的体积</span><br><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><br><span class="hljs-comment"># 许多 package 会根据此环境变量，做出不同的行为</span><br><span class="hljs-comment"># 另外，在 webpack 中打包也会根据此环境变量做出优化，但是 create-react-app 在打包时会写死该环境变量</span><br><span class="hljs-comment"># 注意: 该环境变量有时可能引起问题</span><br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><br><span class="hljs-comment"># http-server 用以起静态资源服务器</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build &amp;&amp; npm install -g http-server</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># create-react-app 中 build 为最后的静态资源目录</span><br><span class="hljs-comment"># 如果你不是使用 cra 构建的，此处的 ./build 需要更改为你的静态资源目录</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>现在这个前端服务已经跑起来了，接下来你可以完成部署的其它阶段了。</p><p>一般情况下，以下就成了运维的工作了，不过，拓展自己的知识边界总是没错的。其它阶段介绍如下</p><ul><li>使用 <code>nginx</code> 或者 <code>traefik</code> 做反向代理。在我内部集群中使用了 <code>traefik</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/traefik.md">traefik 简易入门</a></li><li>使用 <code>kubernetes</code> 或者 <code>docker compose</code> 做容器编排。在我内部集群中使用了 <code>compose</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/traefik-compose.md">docker compose 简易入门</a></li><li>使用 <code>gitlab ci</code>，<code>drone ci</code> 或者 <code>github actions</code> 等做 CI&#x2F;CD 自动部署。在我内部集群中使用了 <code>github actions</code>，详见 <a href="https://github.com/shfshanyue/op-note/blob/master/github-action-guide.md">github actions 简易入门</a></li></ul><p>这时镜像存在两个问题，导致每次部署时间过长，不利于产品的快速交付，没有快速交付，也就没有敏捷开发 (Agile)</p><ul><li>构建镜像时间过长</li><li>构建镜像大小过大，多时甚至 1G+</li></ul><h2 id="利用镜像缓存"><a href="#利用镜像缓存" class="headerlink" title="利用镜像缓存"></a>利用镜像缓存</h2><p>我们注意到，相对于项目的源文件来讲，<code>package.json</code> 是相对稳定的。如果没有新的安装包需要下载，则再次构建镜像时，无需重新构建依赖。则可以在 npm install 上节省一半的时间。</p><p>对于 <code>ADD</code> 来讲，如果需要添加的文件内容的 <code>checksum</code> 没有发生变化，则可以利用缓存。把 <code>package.json/package-lock.json</code> 与源文件分隔开写入镜像是一个很好的选择。目前，如果没有新的安装包更新的话，可以节省一半时间</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><br><span class="hljs-comment"># http-server 不变动也可以利用缓存</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install -g http-server</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-comment"># 首次添加此两个文件，充分利用缓存</span><br><span class="hljs-comment"># 当这两个文件不发生变化时，下一步的 npm i 将利用缓存不会执行</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-comment"># 这是镜像缓存的关键部分</span><br><span class="hljs-comment"># 注意此时把该命令放在了添加 package.json 之后</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>关于利用缓存有更多细节，需要特别注意一下。如 <code>RUN git clone &lt;repo&gt;</code>，如果命令字符串没有更新，则将使用缓存，当命令是非幂等性时，这将有可能导致问题。</p><blockquote><p>关于缓存及可能导致的问题，可以参考我的文章 <a href="https://shanyue.tech/op/dockerfile-practice.html#%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98">Dockerfile 最佳实践</a></p></blockquote><h2 id="CI-环境下的优化"><a href="#CI-环境下的优化" class="headerlink" title="CI 环境下的优化"></a>CI 环境下的优化</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-comment"># http-server 不变动也可以利用缓存</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install -g http-server</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-comment"># 首次添加此两个文件，充分利用缓存</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> http-server ./build -p 80</span><br></code></pre></td></tr></table></figure><p>在 CI 环境下主要做了一点改动：使用 <code>npm ci</code> 代替 <code>npm i</code>，经实验，<code>npm ci</code> 可以减少将近一半的的依赖安装时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install<br>added 1154 packages <span class="hljs-keyword">in</span> 60s<br><br>$ npm ci<br>added 1154 packages <span class="hljs-keyword">in</span> 35s<br></code></pre></td></tr></table></figure><p>另外，当 <code>package.json</code> 与 <code>package-lock.json</code> 版本不匹配时，<code>npm ci</code> 将会报出异常，提前检测出不安全信息，及早发现问题，及早解决问题。</p><p>关于安装依赖速度的优化，可以参考我以前的文章 <a href="https://shanyue.tech/frontend-engineering/npm-install.html">前端高级进阶：在生产环境中使你的 npm i 速度提升 50%</a> </p><h2 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h2><p>得益于缓存，现在镜像构建时间已经快了不少。但是，此时镜像的体积依旧过于庞大，这也将会导致部署时间的加长。原因如下</p><p>考虑下每次 CI&#x2F;CD 部署的流程</p><ol><li>在构建服务器 (Runer) 构建镜像</li><li>把镜像推至镜像仓库服务器</li><li>在生产服务器拉取镜像，启动容器</li></ol><p>显而易见，镜像体积过大会在前两步上传及下载时造成传输效率低下，增加每次部署的延时。</p><p>即使，构建服务器与生产服务器在同一节点下，没有延时的问题 (基本没可能)。减少镜像体积也能够节省磁盘空间。</p><p>关于镜像体积的过大，完全是因为node_modules 臭名昭著的体积:</p><p><img src="https://cdn.jsdelivr.net/gh/shfshanyue/assets@master/src/nodemodules.1qjzi8yeok80.png" alt="node_modules 的体积"></p><p>但最后我们只需要构建生成的静态资源，对于源文件以及 <code>node_modules</code> 下文件，占用体积过大且不必要，造成浪费。</p><p>此时可以利用 Docker 的多阶段构建，仅来提取编译后文件，即打包生成的静态资源。在这重要的一步中，我们把基础镜像由 <code>node</code> 改为效率更高、体积更小的 <code>nginx</code>，用以它提供基础服务。</p><p>由于 <code>nginx</code> 基础镜像默认暴露 80 端口，此时的 <code>EXPOSE 80</code> 可忽略不写。</p><p>对 Dockerfile 做一改进</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine as builder<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build</span><br><br><span class="hljs-comment"># 选择更小体积的基础镜像</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /code/build /usr/share/nginx/html</span><br></code></pre></td></tr></table></figure><p>此时，镜像体积从 1G+ 变成了 50M+。若此时的部署仅仅是在测试环境或者多分支环境下为了方便测试，那就大功告成，完美解决问题了。</p><h2 id="使用对象存储服务-OSS"><a href="#使用对象存储服务-OSS" class="headerlink" title="使用对象存储服务 (OSS)"></a>使用对象存储服务 (OSS)</h2><p>分析一下 50M+ 的镜像体积，<code>nginx:alpine</code> 的镜像是16M，剩下的40M是静态资源。生产环境的静态资源往往会在独立域名上维护，并使用 CDN 进行加速。</p><p><strong>如果把静态资源给上传到文件存储服务，即OSS，并使用 CDN 对 OSS 进行加速，则没有必要打入镜像了。而在生产环境下也有对静态资源上 CDN 的强烈需求。</strong></p><p>此时镜像大小会控制在 20M 以下。虽然极大地减小了镜像体积，但是它会增加复杂度与增加镜像构建时间(如上传到OSS)，对于测试环境或者分支环境没必要使用 OSS。</p><p>关于静态资源，可以分类成两部分：</p><ul><li><code>/build</code>，此类文件在项目中使用 require&#x2F;import 引用，会被 webpack 打包并加 hash 值，并通过 publicPath 修改资源地址。可以把此类文件上传至 oss，并加上永久缓存，不需要打入镜像</li><li><code>/public</code>，此类文件在项目中直接引用根路径，直接打入镜像，如果上传至 OSS 可能增加复杂度 (批量修改 publicPath)</li></ul><p>此时通过一个脚本命令 <code>npm run uploadOss</code>，来把静态资源上传至 OSS。更新后的 Dockerfile 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span>-alpine as builder<br><br><span class="hljs-keyword">ENV</span> PROJECT_ENV production<br><span class="hljs-comment"># ENV NODE_ENV production</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> package.json package-lock.json /code</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm ci</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /code</span><br><br><span class="hljs-comment"># npm run uploadOss 是把静态资源上传至 oss 上的脚本文件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build &amp;&amp; npm run uploadOss</span><br><br><span class="hljs-comment"># 选择更小体积的基础镜像</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder code/build/index.html code/public/favicon.ico /usr/share/nginx/html/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder code/build/static /usr/share/nginx/html/static</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经过本篇文章总结，在前端中构建镜像需要注意以下几点</p><ol><li>镜像中使用基于 <code>alpine</code> 的镜像，减小镜像体积。</li><li>镜像中需要锁定 <code>node</code> 的版本号，尽可能也锁定 <code>alpine</code> 的版本号，如 <code>node:10.19-alpine3.11</code>。(我示例代码中未如此详细地指出)</li><li>选择合适的环境变量 <code>NODE_ENV</code> 及 <code>PROJECT_ENV</code>，如在测试环境下进行构建</li><li>npm ci 替代 npm i，避免版本问题及提高依赖安装速度</li><li><code>package.json</code>&#x2F;<code>package-lock.json</code> 单独添加，充分利用镜像缓存</li><li>使用多阶段构建，在 node 环境中构建，在 nginx 环境中提供服务，减小镜像体积</li><li>如有必要，静态资源请上 CDN</li></ol>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名解析 | A记录 ，CNAME，MX你懂了吗？</title>
    <link href="/blog/2022/08/23/dns-cname/"/>
    <url>/blog/2022/08/23/dns-cname/</url>
    
    <content type="html"><![CDATA[<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>什么是域名解析？</p><p>域名解析就是国际域名、国内域名、中文域名等域名申请后做的到IP地址的转换过程。IP地址是网路上标识您站点的数字地址，为了简单好记，采用域名来代替ip地址标识站点地址。域名的解析工作由<code>DNS</code>服务器完成。</p><p>如下图，百度 <code>www.baidu.com</code> 就是域名，解析出来的<code>IP</code> <code>39.156.66.10</code> 这个过程就是域名解析。<br><img src="https://files.mdnice.com/user/13996/cd5eff55-8573-4395-8e7f-80d319fc85cf.png"></p><h2 id="A-记录"><a href="#A-记录" class="headerlink" title="A 记录"></a>A 记录</h2><p><code>A (Address)记录</code>是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的<code>web server</code>上。同时也可以设置您域名的二级域名。</p><p>又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。</p><p>  指向的目标主机地址类型只能使用IP地址；</p><ul><li>1.如何添加A记录</li></ul><p>  在“主机名”中填入子域的名字，“类型”为A，“IP地址&#x2F;主机名”中填入web服务器的IP地址，点击“新增”按钮即可。</p><p>  注：如果“主机名”一栏为空则表示对域名mydomain.com本身做指向。</p><ul><li>2.泛域名解析</li></ul><p>  即将该域名所有未指定的子域名都指向一个空间。</p><p>  在“主机名”中填入*，“类型”为A，“IP地址&#x2F;主机名”中填入web服务器的IP地址。</p><h2 id="CNAME记录"><a href="#CNAME记录" class="headerlink" title="CNAME记录"></a>CNAME记录</h2><p>  通常称别名指向。</p><p>  这种记录允许您将多个名字映射到另外一个域名。</p><p>  您可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机<a href="http://www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了./">www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</a></p><p>  - CNAME的目标主机地址只能使用主机名，不能使用IP地址；</p><p>  - 主机名前不能有任何其他前缀，如：http:&#x2F;&#x2F;等是不被允许的；</p><p>  - A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。 </p><h2 id="MX-记录"><a href="#MX-记录" class="headerlink" title="MX 记录"></a>MX 记录</h2><p>  邮件交换记录。</p><p>  用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p><p>  - MX记录可以使用主机名或IP地址；</p><p>  - MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；</p><p>  - 如果在“主机名”中填入子域名则此MX记录只对该子域名生效。 </p><h2 id="使用A记录和CNAME进行域名解析的区别"><a href="#使用A记录和CNAME进行域名解析的区别" class="headerlink" title="使用A记录和CNAME进行域名解析的区别?"></a>使用A记录和CNAME进行域名解析的区别?</h2><p>A记录就是把一个域名解析到一个IP地址（Address，特制数字IP地址），而CNAME记录就是把域名解析到另外一个域名。</p><p>其功能是差不多，CNAME将几个主机名指向一个别名，其实跟指向IP地址是一样的，因为这个别名也要做一个A记录的。</p><p>但是使用CNAME记录可以很方便地变更IP地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更IP时，只需要变更别名的A记录就可以了。</p><h2 id="使用A记录和CNAME哪个好？"><a href="#使用A记录和CNAME哪个好？" class="headerlink" title="使用A记录和CNAME哪个好？"></a>使用A记录和CNAME哪个好？</h2><p>域名解析CNAME记录A记录哪一种比较好？</p><p>如果论对网站的影响，就没有多大区别。但是：CNAME有一个好处就是稳定，就好像一个IP与一个域名的区别。服务商从方便维护的角度，一般也建议用户使用CNAME记录绑定域名的。如果主机使用了双线IP，显然使用CNAME也要方便一些。</p><p>A记录也有一些好处，例如可以在输入域名时不用输入WWW.来访问网站哦！从SEO优化角度来看，一些搜索引擎如alex或一些搜索查询工具网站等等则默认是自动去掉WWW.来辨别网站，CNAME记录是必须有如：WWW(别名)前缀的域名，有时候会遇到这样的麻烦，前缀去掉了默认网站无法访问。</p><p>有人认为，在SEO优化网站的时候，由于搜索引擎找不到去掉WWW.的域名时，对网站权重也会有些影响。因为有些网民客户也是不喜欢多写三个W来访问网站的，网站无法访问有少量网民客户会放弃继续尝试加WWW.访问域名了，因此网站访问浏览量也会减少一些。</p><p>也有人认为同一个域名加WWW.和不加WWW.访问网站也会使网站权重分散，这也是个问题。但是可以使用301跳转把不加WWW.跳转到加WWW.的域名，问题就解决了</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中new操作符的原理</title>
    <link href="/blog/2022/08/05/mock-new%20/"/>
    <url>/blog/2022/08/05/mock-new%20/</url>
    
    <content type="html"><![CDATA[<h2 id="new的用处"><a href="#new的用处" class="headerlink" title="new的用处"></a>new的用处</h2><p>new的作用是通过构造函数来创建一个实例对象，该实例与原型和构造函数之间的关系如下图所示：</p><p><img src="https://raw.githubusercontent.com/retech-fe/image-hosting/main/img/2022/08/05/18-48-49-e655bf8be2097ba1f24e62b5a22c2922-202171393058303-04e34a.jpeg"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>javascript中的new是一个语法糖，new的过程如下</p><ol><li>在内存中创建一个新对象</li><li>这个新对象内部的[[Prototype]]指针被赋值为构造函数的 prototype 属性</li><li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）</li></ol><blockquote><p>很多直接把下面4.5的归为一步</p></blockquote><ol start="4"><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</li></ol><h2 id="模拟-new-操作符"><a href="#模拟-new-操作符" class="headerlink" title="模拟 new 操作符"></a>模拟 new 操作符</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">constructor, ...arg</span>) &#123;<br>    <span class="hljs-comment">// ① 创建一个新的空对象 obj</span><br>    <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>    <span class="hljs-comment">// ② 将新对象的的原型指向当前函数的原型</span><br>    obj.<span class="hljs-property">__proto__</span> = constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <span class="hljs-comment">// ③ 新创建的对象绑定到当前this上</span><br>    <span class="hljs-keyword">const</span> result = constructor.<span class="hljs-title function_">apply</span>(obj, arg);<br>    <span class="hljs-comment">// ④ 如果没有返回其他对象，就返回 obj，否则返回其他对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;object&#x27;</span> ? result : obj; <span class="hljs-comment">// 为什么要判断返回值的类型？这是因为new一个实例的时候，如果没有return，就会根据构造函数内部this绑定的值生成对象，如果有返回值，就会根据返回值生成对象，为了模拟这一效果，就需要判断apply后是否有返回值。</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-keyword">var</span> luckyStar = <span class="hljs-title function_">_new</span>(<span class="hljs-title class_">Foo</span>, <span class="hljs-string">&#x27;luckyStar&#x27;</span>);<br><span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(luckyStar.<span class="hljs-property">name</span>); <span class="hljs-comment">//luckyStar</span><br><br></code></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_new</span>(<span class="hljs-params">fn, ...arg</span>) &#123;<br>    <span class="hljs-comment">// 基于函数原型创建一个新的对象</span><br>    <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    <span class="hljs-keyword">const</span> newObj = fn.<span class="hljs-title function_">apply</span>(obj, arg);<br>    <span class="hljs-keyword">return</span> newObj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br>&#125;<br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GirlName</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">const</span> xiaoMei = <span class="hljs-title function_">_new</span>(<span class="hljs-title class_">GirlName</span>, <span class="hljs-string">&#x27;Xiao Mei&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xiaoMei) <br></code></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">New</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;&#125;; <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">let</span> constructor =  [].<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 获取构造函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">if</span> (constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> !== <span class="hljs-literal">null</span>) &#123;<br>        obj.<span class="hljs-property">__proto__</span> = constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 构造函数链接到新对象</span><br>    &#125;<br>    <span class="hljs-comment">// let ret = constructor.apply(obj, [].slice.call(arguments)); // 改变this指向 但是对参数使用slice会阻止某些JavaScript引擎中的优化</span><br>    <span class="hljs-keyword">let</span> ret = constructor.<span class="hljs-title function_">apply</span>(obj, (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span> ? [<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]] : <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable language_">arguments</span>))); <span class="hljs-comment">// 替代方案</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> ret);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&quot;function&quot;</span>) &amp;&amp; ret !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj; <span class="hljs-comment">// 如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用将返回该对象引用。</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">a, b</span>) &#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = a;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = b;<br>&#125;<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-title class_">New</span>(name, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title function_">name</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br></code></pre></td></tr></table></figure><h2 id="为什么要判断返回值的类型？"><a href="#为什么要判断返回值的类型？" class="headerlink" title="为什么要判断返回值的类型？"></a>为什么要判断返回值的类型？</h2><p>这是因为new一个实例的时候，如果没有return，就会根据构造函数内部this绑定的值生成对象，如果有返回值，就会根据返回值生成对象，为了模拟这一效果，就需要判断apply后是否有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">GirlName</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br><br>    <span class="hljs-comment">// 如果这里 return &#x27;Tomboy&#x27;，最后的结果还是 &#x27;Xiao Mei&#x27;</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tomboy&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>        <span class="hljs-attr">sayName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xiaoMei = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlName</span>(<span class="hljs-string">&#x27;Xiao Mei&#x27;</span>, <span class="hljs-number">18</span>);<br>xiaoMei.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// Tomboy，这里的对象就成了构造函数返回的对象</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承</title>
    <link href="/blog/2022/07/21/inherit/"/>
    <url>/blog/2022/07/21/inherit/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是继承"><a href="#1-什么是继承" class="headerlink" title="1. 什么是继承?"></a>1. 什么是继承?</h2><ul><li>JS 中一切皆对象，必须有一种机制，把所有的对象联系起来，实现类似的“继承”机制。</li><li>不同于大部分面向对象语言，ES6 之前并没有引入类（class）的概念，JS 并非通过类而是通过构造函数来创建实例，javascript中的继承是通过原型链来体现的。</li><li>其基本思想是利用<strong>原型让一个引用类型继承另一个引用类型的属性和方法</strong>。</li></ul><h2 id="2-为什么要继承"><a href="#2-为什么要继承" class="headerlink" title="2.为什么要继承?"></a>2.为什么要继承?</h2><blockquote><p>提高代码的重用性、较少代码的冗余</p></blockquote><p>刚刚提到：”利用原型让一个引用类型继承另一个引用继承的属性和方法”,那么咱们先看下 原型，原型链相关的知识</p><h3 id="2-1-原型（prototype）"><a href="#2-1-原型（prototype）" class="headerlink" title="2.1 原型（prototype）"></a>2.1 原型（prototype）</h3><blockquote><p>JS中所有函数都会有prototype属性，只有函数才有其所有的属性和方法都能被构造函数的实例对象共享访问</p></blockquote><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br>   <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sayHello&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>   <span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">sayHello</span>) <span class="hljs-comment">//sayHello</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">sayHello</span>) <span class="hljs-comment">//sayHello</span><br></code></pre></td></tr></table></figure><h3 id="2-2-构造函数（constructor"><a href="#2-2-构造函数（constructor" class="headerlink" title="2.2 构造函数（constructor)"></a>2.2 构造函数（constructor)</h3><blockquote><p>JS 中 constructor 存在每个函数的 prototype 属性中，其保存了指向该函数的引用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">Person</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="2-3-原型链"><a href="#2-3-原型链" class="headerlink" title="2.3 原型链"></a>2.3 原型链</h3><blockquote><p>在 JavaScript 中是通过 prototype 对象指向父类对象，直到指向 Object 对象为止（person → Person → Object），这样就形成了一个原型指向的链条，专业术语称之为原型链</p></blockquote><ul><li>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。</li><li>如果没有则去原型的原型中寻找,直到找到 Object 对象的原型，Object 对象的原型没有原型，如果在 Object 原型中依然没有找到，则返回 undefined。</li><li>注意：Object 的<em>proto</em>为空, 即原型链的尽头一般来说都是 Object.prototype</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p1.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><blockquote><p>JS 引擎查找摸个属性时，先查找对象本身是否存在该属性，如果不存在就会在原型链上一层一层进行查找</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f182141e627e498ea0aafea81cc5ff4d.png" alt="在这里插入图片描述"></p><h4 id="由图我们可知几个关系："><a href="#由图我们可知几个关系：" class="headerlink" title="由图我们可知几个关系："></a>由图我们可知几个关系：</h4><ul><li>每一个构造函数都有(原型)prototype 指向它的原型对象。</li><li>原型对象有 constructor 指向它的构造函数。</li><li>构造函数可以通过 new 的创建方式创建实例对象</li><li>实例对象通过 proto 指向它的原型对象。</li><li>原型对象也有自己的原型对象，通过 proto 指向。</li></ul><h2 id="3-目前我总结常用的一共有6种继承方式"><a href="#3-目前我总结常用的一共有6种继承方式" class="headerlink" title="3.目前我总结常用的一共有6种继承方式"></a>3.目前我总结常用的一共有6种继承方式</h2><ul><li>原型链继承</li><li>借用构造函数继承</li><li>组合式继承（原型链+构造函数）</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承<br>咱们本期先讲解 <strong>原型链继承</strong>和<strong>原型式继承</strong> ，如果想了解其他的继承可查看我的 关于 <a href="https://blog.csdn.net/qq_34574204/article/details/120716964">详解 js 继承的那些事儿</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;this.name&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="3-1-原型链继承"><a href="#3-1-原型链继承" class="headerlink" title="3.1 原型链继承"></a>3.1 原型链继承</h3><p><strong>实现方式：</strong> 让实例的原型等于父类的实例</p><p><strong>优点：</strong> 实例可以继承父类的构造个函数，实例的构造函数，父类的原型</p><p><strong>缺点：</strong> 不能向父类传递参数，由于实例的原型等于父类的实例，那么改变父类的属性，实例的属性也会跟着改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;xiaoming&quot;</span><br>&#125;<br>child.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>()<br>child1.<span class="hljs-property">name</span> <span class="hljs-comment">//xiaoming</span><br>child1.<span class="hljs-property">age</span> <span class="hljs-comment">//100</span><br>child1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="3-2-原型式继承"><a href="#3-2-原型式继承" class="headerlink" title="3.2 原型式继承"></a>3.2 原型式继承</h3><p><strong>实现方式：</strong> 函数包装对象，返回对象的引用，这个函数就变成可以随时添加实例或者对象，Object.create()就是这个原理</p><p><strong>优点：</strong> 复用一个对象用函数包装</p><p><strong>缺点：</strong> 所有实例都继承在原型上面 无法复用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">child</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = obj<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">let</span> child2 = <span class="hljs-title function_">child</span>(child1)<br>child2.<span class="hljs-property">age</span> <span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭配 Fluid 如何优雅的写一篇文章</title>
    <link href="/blog/2021/07/11/fluid-write/"/>
    <url>/blog/2021/07/11/fluid-write/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Vince<br>原文地址：<a href="https://i.vince.pub/p/fluid-write/">https://i.vince.pub/p/fluid-write/</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。</p><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><h3 id="熟悉-Markdown-语法"><a href="#熟悉-Markdown-语法" class="headerlink" title="熟悉 Markdown 语法"></a>熟悉 Markdown 语法</h3><p>对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 <strong>Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。</strong></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>站点</th><th align="center">地址</th><th align="right">介绍</th></tr></thead><tbody><tr><td>Fluid Docs</td><td align="center"><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></td><td align="right">Fluid 官方文档</td></tr><tr><td>Hexo-theme-fluid</td><td align="center"><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></td><td align="right">Fluid Github Repo</td></tr><tr><td>Fluid Blog</td><td align="center"><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></td><td align="right">Fluid 官方博客</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">站点|地址|介绍<br>--|:--:|--:<br>Fluid Docs|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com<span class="hljs-regexp">/docs/</span>|Fluid 官方文档<br>Hexo-theme-fluid|https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid|Fluid Github Repo<br>Fluid Blog|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com/|Fluid 官方博客<br></code></pre></td></tr></table></figure><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>默认渲染器下正常显示，不同渲染器显示效果不同，写法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注演示[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注内容演示</span><br></code></pre></td></tr></table></figure><h3 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h3><p>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。</p><p><a id="demo">跳转位置演示（跳转位置设置点）</a></p><h4 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h4><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #519D9E; &quot;</span>&gt;</span>#519D9E颜色演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h4><p><span  style="font-size:0.7em;">0.7em 文字大小演示</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.7em;&quot;</span>&gt;</span>0.7em 文字大小演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="文字位置"><a href="#文字位置" class="headerlink" title="文字位置"></a>文字位置</h4><p style="text-align:center">内容居中演示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span>内容居中演示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> # 可以修改 text-align 参数来设置文字位置。<br></code></pre></td></tr></table></figure><hr><h4 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h4><p><a href="#demo">点击到达跳转位置演示</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;#demo&quot;</span>&gt;点击到达跳转位置演示&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在需要跳转的地方添加此代码。</span><br>&lt;<span class="hljs-keyword">a</span> id=<span class="hljs-string">&quot;demo&quot;</span>&gt;跳转位置演示（跳转位置设置点）&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在跳转位置添加次代码。</span><br></code></pre></td></tr></table></figure><hr><h4 id="综合演示"><a href="#综合演示" class="headerlink" title="综合演示"></a>综合演示</h4><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid 写文章</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;&quot;</span>&gt;</span><br>综合演示<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>优雅使用 Fluid 写文章<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="iframe-页面镶套"><a href="#iframe-页面镶套" class="headerlink" title="iframe 页面镶套"></a>iframe 页面镶套</h4><p>iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。</p><iframe src="https://hexo.fluid-dev.com/" width="100%" height="650" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attribute">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attribute">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>一些参数说明，<code>width=&quot;100%&quot;</code> 为宽度自适应，高度请根据实际需求跳转，<strong>注意移动端页面是否匹配。</strong> <code>scrolling</code> 为滚动条参数。<code>frameborder</code> 为边框参数。<code>noresize</code> 属性规定用户无法调整框架的大小。</p><h4 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a>details 标签</h4><p>用于展示代码较多需要折叠或折叠相关内容，以下为演示。<code>summary</code> 填写显示名称。</p><details><summary>Demo</summary><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></details><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="善用-Tag-组件"><a href="#善用-Tag-组件" class="headerlink" title="善用 Tag 组件"></a>善用 Tag 组件</h3><p>Fluid 内置了许多 Tag 组件，包含便签、行内标签（已知不会出现间隔，谨慎使用）、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，**<a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">点击跳转到 Fluid Doc</a>**。</p><h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h2><p>众所周知，<strong>博客好不好看，配图占一半</strong>。这里给大家推荐几个我常用找配图的地方。<strong>另外，请遵循相关网站的版权协议。</strong></p><h3 id="Wallpaper-Hub"><a href="#Wallpaper-Hub" class="headerlink" title="Wallpaper Hub"></a>Wallpaper Hub</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-04-17_175244.png" alt="Wallpaper Hub"></p><p><strong><a href="https://wallpaperhub.app/">点击跳转到 Wallpaper Hub</a></strong></p><h3 id="Wallhaven"><a href="#Wallhaven" class="headerlink" title="Wallhaven"></a>Wallhaven</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-04-17_174841.png" alt="Wallhaven"></p><p><strong><a href="https://wallhaven.cc/">点击跳转到 Wallhaven</a></strong></p><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h3><p><img src="https://cdn.jsdelivr.net/gh/vinceying/static@main/images/blog_fluid/2020-05-14_000557.png" alt="Unsplash"></p><p><strong><a href="https://unsplash.com/">点击跳转到 Unsplash</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>用户经验</tag>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Netlify CMS 在线编辑博客</title>
    <link href="/blog/2021/04/20/hexo-netlify/"/>
    <url>/blog/2021/04/20/hexo-netlify/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：千泷<br>原文地址：<a href="https://www.myql.xyz/post/e00ab0f6/">https://www.myql.xyz/post/e00ab0f6/</a></p>          </div><h2 id="✨-前言"><a href="#✨-前言" class="headerlink" title="✨ 前言"></a>✨ 前言</h2><p>我们都知道，<a href="https://hexo.io/zh-cn/">Hexo</a> 是一个静态部署博客的框架，优点在于速度快，成本低（无需服务器），缺点在于繁琐，你每次更新文章都需要去改代码，再部署推送，修改配置也是如此，你不能像 <code>WordPress</code> 一样直接在后台修改配置并使它生效。</p><p>不过有很多教程可以让你无需繁琐的部署，只管推送代码，通过 <code>GitHub Actions</code>，<code>travis-ci</code>，<a href="https://vercel.com/">vercel</a>，<a href="Netlifyhttps://www.netlify.com/">Netlify</a> 等都可以便捷的进行博客的部署，只管写代码然后推送就好，类似的教程有非常多，在此就不再重复介绍。那么，我们是否可以在此基础上，更加便捷的进行静态博客的写作和管理？答案是可以的。</p><p>我们可以通过将博客部署到 <a href="https://www.netlify.com/">Netlify</a>，并使用 <a href="https://www.netlifycms.org/">Netlify CMS</a> 来做到这一点。</p><p>首先，我们来了解一下配置完之后可以做到哪些事情？</p><ul><li>在线新建，编辑，预览，删除博客文章</li><li>支持文章草稿，工作流</li><li>支持对博客图片的管理</li><li>支持在线修改博客配置，例如对首页顶部图的修改，友链的修改</li></ul><hr><h3 id="🎈-图片预览"><a href="#🎈-图片预览" class="headerlink" title="🎈 图片预览"></a>🎈 图片预览</h3><p>配置完的界面</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420211303684.png" alt="image-20210420211303684"></p><p>在线对文章进行编辑，修改</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418222435713.png" alt="image-20210418222435713"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418222455291.png" alt="image-20210418222455291"></p><p>工作流</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420212403763.png" alt="image-20210420212403763"></p><p>对媒体资源的管理</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420212801157.png" alt="image-20210420212801157"></p><p>对其他页面的修改</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420213123997.png" alt="image-20210420213123997"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420213142628.png" alt="image-20210420213142628"></p><p>在线修改博客首页、文章页、归档页等页面的顶部图</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420214308165.png" alt="image-20210420214308165"></p><p>在线添加、编辑友链页面</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418223337304.png" alt="image-20210418223337304"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418223354013.png" alt="image-20210418223354013"></p><h3 id="🔗-在线演示"><a href="#🔗-在线演示" class="headerlink" title="🔗 在线演示"></a>🔗 在线演示</h3><p>为了更加直观，做了一个已经配置完毕的博客，你可以在线体验上述功能 👉<a href="https://qwqmiao.cf/admin/">点我查看</a></p><h2 id="📃-简单说明"><a href="#📃-简单说明" class="headerlink" title="📃 简单说明"></a>📃 简单说明</h2><p>下面我将会以 <a href="https://hexo.io/zh-cn/">Hexo</a> + 做演示，并配置 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>的友链功能，达到在线编辑预览友链的目的，但此方法不仅仅只适用于 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>的友链功能，其他各类主题也可以通过此方法达到在线修改配置的目的，只要你配置完成，几乎可以修改所有配置项。包括但不限于以下类型的文件<code>yml</code>、<code>yaml</code>、<code>toml</code>、<code>json</code>、<code>md</code>、<code>markdown</code>、<code>html</code>具体请查看 👉<a href="https://www.netlifycms.org/">Netlify CMS</a> 文档。</p><h2 id="🔧-具体配置"><a href="#🔧-具体配置" class="headerlink" title="🔧 具体配置"></a>🔧 具体配置</h2><p><a href="https://www.netlifycms.org/">Netlify CMS</a> 使用的前提条件是你必须将博客部署到 <a href="https://www.netlify.com/">Netlify</a> 上。因为网上有很多部署教程，这里不再重复。</p><p>具体可以查看：</p><ul><li><a href="https://guanqr.com/tech/website/deploy-blog-to-netlify/">博客通过 Netlify 实现持续集成</a></li><li><a href="https://io-oi.me/tech/deploy-static-site-to-netlify/">将 Hexo 静态博客部署到 Netlify</a></li></ul><h3 id="👟-准备工作"><a href="#👟-准备工作" class="headerlink" title="👟 准备工作"></a>👟 准备工作</h3><p>在部署完成后，你需要开启 <code>Identity</code></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225044656.png" alt="image-20210418225044656"></p><p>进入设置中</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225125358.png" alt="image-20210418225125358"></p><p>将 <code>Registration preferences</code> 修改为 <code>Invite only</code> 此项为是否开启注册，默认是开启注册。修改为 <code>Invite only</code> 后表示仅受邀请的用户可以注册，当然此项你可以在自己注册完毕之后再行修改。</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225239607.png" alt="image-20210418225239607"></p><p>下滑找到 <code>Git Gateway</code> 并开启。</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418225726557.png" alt="image-20210418225726557"></p><p>至此准备工作完成</p><h3 id="🎨-修改博客配置"><a href="#🎨-修改博客配置" class="headerlink" title="🎨 修改博客配置"></a>🎨 修改博客配置</h3><blockquote><p>在博客根目录中找到<code>_config.yml</code>并修改，这一步是跳过文件夹渲染，不然后面会出错</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">admin/*</span><br></code></pre></td></tr></table></figure><p>在博客<code>source</code>文件夹中，创建<code>admin</code>文件夹，并新建两个文件<code>index.html</code>和<code>config.yml</code></p></blockquote><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210418230338242.png" alt="image-20210418230338242"></p><p>在 <code>index.html</code> 中添加以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;x-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=Edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;white&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>魔王の领地<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">      <span class="hljs-attr">defer</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/netlify-cms@2/dist/netlify-cms.js&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>config.yml</code> 中添加如下折叠内容</p><details><summary>点击展开配置内容</summary><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">backend:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">git-gateway</span> <span class="hljs-comment"># https://github.com/netlify/netlify-cms</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 要更新的分支(可选；默认为主分支)</span><br><span class="hljs-comment"># This line should *not* be indented</span><br><span class="hljs-attr">publish_mode:</span> <span class="hljs-string">editorial_workflow</span><br><span class="hljs-comment"># This line should *not* be indented</span><br><span class="hljs-attr">media_folder:</span> <span class="hljs-string">&quot;source/images/uploads&quot;</span> <span class="hljs-comment"># 媒体文件将存储在图片/上载下的Repo中。</span><br><span class="hljs-attr">public_folder:</span> <span class="hljs-string">&quot;/images/uploads&quot;</span> <span class="hljs-comment"># 上传的媒体的src属性将以/images/uploads开头。</span><br><span class="hljs-attr">site_url:</span> <span class="hljs-string">https://www.myql.xyz</span> <span class="hljs-comment"># 网站网址</span><br><span class="hljs-attr">display_url:</span> <span class="hljs-string">https://www.myql.xyz</span> <span class="hljs-comment"># 显示网址</span><br><span class="hljs-attr">locale:</span> <span class="hljs-string">&quot;zh_Hans&quot;</span> <span class="hljs-comment"># 语言环境 https://github.com/netlify/netlify-cms/tree/master/packages/netlify-cms-locales/src</span><br><span class="hljs-attr">collections:</span>      <span class="hljs-comment"># https://www.netlifycms.org/docs/configuration-options/#collections</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;posts&quot;</span> <span class="hljs-comment"># 在路由中使用，例如：/admin/collections/blog。</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-comment"># 在用户界面中使用</span><br>    <span class="hljs-attr">folder:</span> <span class="hljs-string">&quot;source/_posts&quot;</span> <span class="hljs-comment"># 存储文件的文件夹的路径。</span><br>    <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 允许用户在这个集合中创建新的文件。</span><br>    <span class="hljs-attr">fields:</span> <span class="hljs-comment"># 每份文件的字段，通常是前面的内容。</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125; <br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章封面&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;index_img&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125; <br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章排序&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;sticky&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;发布日期&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="hljs-attr">dateFormat:</span> <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>, <span class="hljs-attr">timeFormat:</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;更新日期&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;updated&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>, <span class="hljs-attr">dateFormat:</span> <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>, <span class="hljs-attr">timeFormat:</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标签&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;tags&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;分类&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;categories&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关键词&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;keywords&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;摘要&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;excerpt&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;内容&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;markdown&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;永久链接&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;permalink&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;评论&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;comments&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;boolean&quot;</span>, <span class="hljs-attr">default:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;pages&quot;</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Pages&quot;</span><br>    <span class="hljs-attr">files:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">&quot;source/about/index.md&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;about&quot;</span><br>        <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关于&quot;</span><br>        <span class="hljs-attr">fields:</span><br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>&#125;<br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;内容&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;markdown&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;评论&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;comments&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;boolean&quot;</span>, <span class="hljs-attr">default:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br><span class="hljs-comment"># 如果你不是Fluid 主题，请删除以下配置，或者对文件路径及字段进行修改</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;settings&quot;</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;settings&quot;</span><br>    <span class="hljs-attr">files:</span>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">&quot;source/_data/fluid_config.yml&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;fluid&quot;</span><br>        <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Fluid 主题配置&quot;</span><br>        <span class="hljs-attr">editor:</span><br>          <span class="hljs-attr">preview:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 是否开启编辑预览</span><br>        <span class="hljs-attr">fields:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;首页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;index&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 是否折叠显示</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;post&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图(默认)&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span> <br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;文章封面图(默认)&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;default_index_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;归档页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;archive&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;分类页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;category&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;标签页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;tag&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;关于页&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;about&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;友链页面&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;links&quot;</span><br>            <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;object&quot;</span><br>            <span class="hljs-attr">collapsed:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">fields:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;顶部图&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;高度&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;banner_img_height&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;number&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;项目&quot;</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;items&quot;</span><br>                <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;list&quot;</span><br>                <span class="hljs-attr">fields:</span><br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站名称&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网址描述&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;intro&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站地址&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;link&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br>                  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">label:</span> <span class="hljs-string">&quot;网站图片&quot;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;avatar&quot;</span>, <span class="hljs-attr">widget:</span> <span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-attr">required:</span> <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure></details><p>请注意，这里我对 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>进行了配置，例如<code>banner_img</code>、<code>index_img</code>等项目，不能正常使用请删除，如果你不是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>请根据实际情况对<code>source\admin\config.yml</code>配置进行修改，如果你和我一样是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>，还需要将主题配置文件（<code>/_config.fluid.yml</code>）中的相对应的字段及其内容一并注释掉才能使其生效，类似于这样</p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210420221125705.png" alt="image-20210420221125705"></p><p><img src="https://myql.coding.net/p/owo/d/img/git/raw/main/posts/image-20210419015951835.png" alt="image-20210419015951835"></p><p>并且创建<code>source\_data\fluid_config.yml</code>，将相关配置复制粘贴到里面（请根据此配置去主题配置文件中注释掉相对应的字段）</p><details><summary>点击展开配置内容</summary><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/images/background.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/mmexport1602581319886.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-g8wvm7.webp</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-q6ov7d.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-zm93dj.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-1kkm2g.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-pkkr2.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/leicancun/img@main/banner_img/wallhaven-rddv31.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">小丁的个人博客</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">世间所有的相遇，都是久别重逢</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://tding.top</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://tding.top/images/avatar.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">米奇妙妙屋</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">逐风揽月登九天</span> <span class="hljs-string">踏浪擒龙游四海</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://ifibe.com/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/avatar.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">荷戟独彷徨</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">爱光学，爱生活，爱创造</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://guanqr.com/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/guanqr/blog/static/icons/android-chrome-512x512.png</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">iMaeGoo’s</span> <span class="hljs-string">Blog</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">虹墨空间站</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://www.imaegoo.com</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://www.imaegoo.com/images/avatar.jpg</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">琉仙の后花园</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">一起来种花家呀</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://blog.lx101.cn/</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://z3.ax1x.com/2021/03/28/cS2LNV.jpg</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">LOGI</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">会点代码的强迫症</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-string">https://logi.im</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">https://code.bdstatic.com/npm/logicdn@1.0.0/logi.im/usr/images/global/logo.webp</span><br></code></pre></td></tr></table></figure></details><p>请保持这样的格式，当然如果你对<code>yml</code>语法非常了解也可以自行修改 🤣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-comment"># 博客名称</span><br>      <span class="hljs-attr">intro:</span> <span class="hljs-comment"># 博客描述</span><br>      <span class="hljs-attr">link:</span> <span class="hljs-comment"># 博客链接</span><br>      <span class="hljs-attr">avatar:</span> <span class="hljs-comment"># 博客logo</span><br></code></pre></td></tr></table></figure><h3 id="🤣-结语"><a href="#🤣-结语" class="headerlink" title="🤣 结语"></a>🤣 结语</h3><p>说一下为什么不推荐直接修改根目录下的 <code>_config.fluid.yml</code> 因为通过 <a href="https://www.netlifycms.org/">Netlify CMS</a> 在线修改配置文件后，仅会保留你已经在 <code>source\admin\config.yml</code> 中配置的选项，没有配置的选项会默认清空，按主题默认配置进行，你当然可以将所有选项进行配置，但是没必要，所以推荐通过 <code>source\_data\fluid_config.yml</code> 仅复制粘贴需要的选项进行修改配置。</p><hr><p>至此 <a href="https://www.netlifycms.org/">Netlify CMS</a> 配置就算完成了，只要推送代码，等待片刻，通过你部署在 <a href="https://www.netlify.com/">Netlify</a> 上的域名，加 <code>/admin/</code> 即可访问你的博客后台。</p><h2 id="🚀-一键部署"><a href="#🚀-一键部署" class="headerlink" title="🚀 一键部署"></a>🚀 一键部署</h2><p>如果你感觉有点繁琐，或者怕配置出错可以直接使用我配置好的<code>一键部署</code>来快速搭建你的博客 👉<a href="https://github.com/leicancun/hexo-blog-netlify">点击前往</a></p><p>ps: 即使是一键部署也不要忘记<code>准备工作</code>里的步骤，这很重要</p><h2 id="😕-改进计划"><a href="#😕-改进计划" class="headerlink" title="😕 改进计划"></a>😕 改进计划</h2><p><del>因为对 css 不太熟悉，并没有设置页面自适应，导致现在编辑页面的预览体验很差，在手机上显示也不甚理想，等我多熟悉熟悉 css 然后弄一下自适应。</del></p><p>目前对图片并没有自适应，在手机上显示的效果也不算好，因为能力有限折腾了很久没弄明白，官方文档在这里 👉<a href="https://www.netlifycms.org/docs/customization/">点我查看</a><br>如果能有大佬能帮助我就更好了，十分欢迎各位大佬</p><h2 id="😁-感谢"><a href="#😁-感谢" class="headerlink" title="😁 感谢"></a>😁 感谢</h2><p>十分感谢 <a href="https://github.com/zkqiang">zkqiang</a> 大佬对我的耐心帮助 🎉🎉🎉</p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>用户经验</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Fluid</title>
    <link href="/blog/2020/04/22/hello-fluid/"/>
    <url>/blog/2020/04/22/hello-fluid/</url>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。</p></blockquote><span id="more"></span><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>文章大部分使用的是 github-markdown 样式，并加入了一些 Material 风格。</p><h3 id="H3-标题"><a href="#H3-标题" class="headerlink" title="H3 标题"></a>H3 标题</h3><h4 id="H4-标题"><a href="#H4-标题" class="headerlink" title="H4 标题"></a>H4 标题</h4><p><strong>粗体</strong></p><p><em>斜体</em></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码：<code>$ hexo new post &quot;My New Post&quot;</code></p><p>代码高亮使用的是 highlight.js，支持 185 种语言和 91 种高亮样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a &lt; n:<br>        <span class="hljs-built_in">print</span>(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        a, b = b, a+b<br>    <span class="hljs-built_in">print</span>()<br>fib(<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;<br>    mu Mutex<br>    read atomic.Value<br>    dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry<br>    misses <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Header 1</th><th>Header 2</th><th>Header 3</th></tr></thead><tbody><tr><td>Key 1</td><td>Value 1</td><td>Comment 1</td></tr><tr><td>Key 2</td><td>Value 2</td><td>Comment 2</td></tr><tr><td>Key 3</td><td>Value 3</td><td>Comment 3</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Fluid 相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备；</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Fluid 功能特性：</p><ul><li>图片懒加载</li><li>自定义代码高亮方案</li><li>内置多语言</li><li>支持多款评论插件</li><li>支持使用数据文件存放配置</li><li>自定义静态资源 CDN</li><li>内置文章搜索</li><li>页脚备案信息</li><li>网页访问统计</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li><li>音乐播放器</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/post.png?w=1280&fmt=webp"></p><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>基于 MathJax 引擎：</p><p>$$<br>\Gamma _ { \epsilon } ( x ) &#x3D; [ 1- e ^ { - 2\pi \epsilon } ] ^ { 1- x } \prod _ { n &#x3D; 0} ^ { \infty } \frac { 1- \operatorname{exp} ( - 2\pi \epsilon ( n + 1) ) } { 1- \operatorname{exp} ( - 2\pi \epsilon ( x + n ) ) }<br>$$</p><p>$$<br>\left( \begin{array} c t ^ { \prime } \ x ^ { \prime } \ y ^ { \prime } \ z ^ { \prime } \end{array} \right) &#x3D; \left( \begin{array} { c c c c } { \gamma } &amp; { - \gamma \beta } &amp; { 0 } &amp; { 0 } \ { - \gamma \beta } &amp; { \gamma } &amp; { 0 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right) \left( \begin{array} c t \ x \ y \ z \end{array} \right)<br>$$</p><p>$$<br>6 \mathrm { CO } _ { 2 } + 6 \mathrm { H } _ { 2 } \mathrm { O } \rightarrow \mathrm { C } _ { 6 } \mathrm { H } _ { 12 } \mathrm { O } _ { 6 } + 6 \mathrm { O } _ { 2 }<br>$$</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>基于 mermaid 语法：</p><pre><code class=" mermaid">sequenceDiagramparticipant Aliceparticipant BobAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts &lt;br/&gt;prevail...John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="内置-Tag-插件"><a href="#内置-Tag-插件" class="headerlink" title="内置 Tag 插件"></a>内置 Tag 插件</h2><p>内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 <a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">用户指南</a>。</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-info">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-warning">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-primary">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><span class="label label-info">行内标签</span> <span class="label label-warning">行内标签</span> <span class="label label-primary">行内标签</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div>            <input type="checkbox" disabled checked="checked">主要是解决一些 Renderer 不支持勾选          </div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="javascript:;"  target="_blank">支持链接</a><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>以下是脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注演示">[1]</span></a></sup>：</p><p>如果你有 Fluid 主题或 Hexo 博客相关的文章，可以通过 Pull Request 方式投稿<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="投稿具体详见[https://github.com/fluid-dev/hexo-fluid-blog](https://github.com/fluid-dev/hexo-fluid-blog)">[2]</span></a></sup>。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>投稿具体详见<a href="https://github.com/fluid-dev/hexo-fluid-blog">https://github.com/fluid-dev/hexo-fluid-blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
